=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#corn-maze
  This script runs non-combat tasks for sleeping dragon maze.
=end

custom_require.call(%w(common drinfomon common-travel events common-items))

class CornMaze
  include DRC
  include DRCT
  include DRCI

  def setup
    @done = false
    @task_count = 0
    @type_ahead_size = 1
    @current_type_ahead = 0
    @searching = true
    @looting = true
    @last_move = Time.now
    @searchables = /rake|stones|hay|wood|basket|boulder|wheel|spiderweb|straw|statue|pail|fence|wagon|burrow|hut/
    @landmarks = /rake|stones|hay|wood|basket|boulder|wheel|spiderweb|straw|statue|pail|fence|wagon|burrow|hut|scarecrow/

    @maze_path = ['south', 'south', 'south', 'south', 'west', 'west', 'west', 'south', 'south', 'south', 'south', 'south', 'go tunnel', 'east', 'south', 'south', 'southeast', 'southeast', 'go tunnel', 'southwest', 'southwest', 'south', 'south', 'go tunnel', 'north', 'north', 'go tunnel', 'north', 'east', 'north', 'west', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'east', 'east', 'east', 'north', 'north', 'north', 'north']

    @mice_path = ['east', 'east', 'south', 'west', 'east', 'south', 'west', 'west', 'south', 'west', 'north', 'north', 'west', 'west', 'south', 'south', 'east', 'north', 'east', 'south', 'east', 'south', 'west', 'west', 'west', 'south', 'south', 'south', 'south', 'south', 'go tunnel', 'east', 'south', 'south', 'southeast', 'southeast', 'go tunnel', 'southwest', 'southwest', 'south', 'south', 'go tunnel', 'north', 'north', 'go tunnel', 'north', 'east', 'north', 'west', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'east', 'east', 'east', 'north', 'north', 'north', 'north']

    @scream_path = ['scream', 'south', 'south', 'south', 'south', 'west', 'west', 'west', 'south', 'south', 'south', 'south', 'south', 'go tunnel', 'scream', 'east', 'south', 'south', 'southeast', 'southeast', 'northeast', 'northeast', 'go tunnel', 'scream', 'go tunnel', 'southwest', 'southwest', 'go tunnel', 'scream', 'southwest', 'southwest', 'south', 'south', 'go tunnel', 'scream', 'north', 'north', 'go tunnel', 'north', 'east', 'north', 'west', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'north', 'east', 'east', 'east', 'north', 'north', 'north', 'north']

    @landmark_path = ['east', 'east', 'east', 'east', 'west', 'west', 'south', 'south', 'west', 'west', 'south', 'west', 'north', 'north', 'west', 'west', 'south', 'south', 'east', 'north', 'east', 'south', 'east', 'south', 'west', 'west', 'west', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'east', 'south', 'west', 'south', 'go tunnel', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'north', 'north', 'north', 'east', 'south', 'east', 'north', 'east', 'east', 'south', 'south', 'south', 'east', 'east', 'east', 'north', 'north', 'east', 'west', 'west', 'north', 'south', 'west', 'north', 'west', 'west', 'north', 'west', 'west', 'west', 'north', 'north', 'north', 'north', 'north', 'go tunnel', 'north', 'north', 'northeast', 'northeast', 'go tunnel', 'northwest', 'northwest', 'north', 'north', 'north', 'south', 'west', 'go tunnel', 'north', 'north', 'north', 'north', 'north', 'east', 'east', 'east', 'north', 'north', 'north', 'north']

    @full_path = [
      'west', 'west', 'west', 'east', 'east', 'east', 'loot',
      'south', 'east', 'west', 'north', 'east', 'east', 'east', 'east', 'southwest', 'north', 'west', 'south', 'loot',
      'south', 'loot',
      'southwest', 'north', 'west', 'south', 'west', 'north', 'loot',
      'north', 'west', 'west', 'south', 'loot',
      'south', 'east', 'north', 'east', 'south', 'east', 'south', 'west', 'loot',
      'west', 'west', 'south', 'east', 'east', 'loot',
      'west', 'south', 'north', 'west', 'south', 'south', 'south', 'loot',
      'south', 'south', 'south', 'south', 'loot',
      'east', 'west', 'south', 'east', 'east', 'west', 'south', 'loot',
      'west', 'south', 'go tunnel', 'south', 'loot',
      'south', 'loot',
      'south', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'north', 'north', 'loot',
      'north', 'east', 'south', 'loot',
      'south', 'east', 'east', 'north', 'loot',
      'south', 'west', 'west', 'north', 'east', 'north', 'east', 'east', 'south', 'south', 'south', 'loot',
      'east', 'east', 'east', 'north', 'north', 'east', 'loot',
      'west', 'west', 'north', 'loot',
      'south', 'west', 'south', 'loot',
      'north', 'north', 'west', 'west', 'north', 'west', 'loot',
      'west', 'west', 'north', 'north', 'north', 'north', 'north', 'go tunnel', 'north', 'north', 'loot',
      'northeast', 'northeast', 'go tunnel', 'northwest', 'loot',
      'northwest', 'north', 'north', 'west', 'east', 'north', 'loot',
      'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'loot',
      'north', 'southeast', 'loot',
      'south', 'southwest', 'southwest', 'southwest', 'southwest', 'southwest', 'loot',
      'southwest', 'southwest', 'south', 'southeast', 'southeast', 'west', 'east', 'north', 'northwest', 'north', 'loot',
      'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'southwest', 'south', 'southwest', 'loot',
      'southwest', 'southwest', 'southwest', 'southwest', 'northeast', 'east', 'south', 'north', 'southeast', 'north', 'loot',
      'north', 'east', 'north', 'south', 'south', 'southwest', 'southwest', 'northwest', 'loot',
      'southeast', 'go tunnel', 'northeast', 'south', 'northeast', 'northeast', 'northeast', 'loot',
      'north', 'north', 'north', 'northeast', 'northeast', 'loot',
      'northeast', 'northeast', 'east', 'east', 'east', 'east', 'east', 'loot',
      'east', 'southwest', 'west', 'west', 'west', 'west', 'loot',
      'southwest', 'southwest', 'southwest', 'southwest', 'south', 'loot',
      'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'east', 'southwest', 'southwest', 'southwest', 'loot',
      'southwest', 'southwest', 'south', 'east', 'southwest', 'west', 'north', 'southwest', 'loot',
      'south', 'north', 'southwest', 'southwest', 'southwest', 'southwest', 'loot',
      'west', 'northeast', 'southwest', 'east', 'northeast', 'east', 'northeast', 'east', 'northeast', 'west', 'east', 'loot',
      'northeast', 'northeast', 'northeast', 'northeast', 'loot',
      'north', 'northeast', 'northeast', 'southwest', 'go tunnel', 'south', 'loot',
      'south', 'west', 'southwest', 'loot',
      'east', 'north', 'east', 'north', 'north', 'east', 'east', 'south', 'loot',
      'north', 'north', 'north', 'loot',
      'north', 'east', 'south', 'east', 'loot',
      'west', 'south', 'east', 'east', 'north', 'loot',
      'south', 'south', 'south', 'west', 'south', 'west', 'south', 'east', 'east', 'loot',
      'south', 'south', 'west', 'south', 'west', 'south', 'loot',
      'east', 'south', 'loot',
      'north', 'west', 'north', 'north', 'north', 'west', 'loot',
      'east', 'south', 'west', 'loot',
      'south', 'go tunnel', 'west', 'northwest', 'north', 'loot',
      'southwest', 'west', 'northwest', 'loot',
      'southeast', 'east', 'east', 'southeast', 'southeast', 'south', 'loot',
      'southeast', 'southeast', 'southeast', 'southeast', 'loot',
      'northwest', 'south', 'south', 'south', 'southwest', 'southwest', 'loot',
      'west', 'west', 'west', 'west', 'west', 'southwest', 'loot',
      'go tunnel', 'south', 'south', 'west', 'west', 'east', 'east', 'east', 'loot',
      'east', 'west', 'north', 'east', 'east', 'south', 'east', 'north', 'north', 'east', 'loot',
      'east', 'east', 'north', 'east', 'north', 'south', 'south', 'south', 'loot',
      'west', 'south', 'loot',
      'west', 'west', 'north', 'east', 'west', 'west', 'south', 'west', 'north', 'north', 'loot',
      'west', 'west', 'west', 'go tunnel', 'southwest', 'southwest', 'southwest', 'north', 'northeast', 'loot',
      'northeast', 'northeast', 'east', 'east', 'loot',
      'east', 'east', 'northeast', 'loot',
      'go tunnel', 'north', 'loot',
      'west', 'northwest', 'east', 'northwest', 'west', 'northwest', 'east', 'loot',
      'northwest', 'west', 'east', 'north', 'south', 'west', 'southwest', 'southwest', 'west', 'northeast', 'loot',
      'west', 'northeast', 'west', 'northeast', 'east', 'north', 'northeast', 'loot',
      'southwest', 'west', 'west', 'west', 'southwest', 'southwest', 'southwest', 'loot',
      'west', 'northeast', 'southwest', 'west', 'northeast', 'east', 'loot',
      'northeast', 'north', 'east', 'west', 'southwest', 'west', 'southwest', 'loot',
      'go tunnel', 'southwest', 'south', 'southeast', 'east', 'east', 'east', 'northwest', 'loot',
      'east', 'southeast', 'east', 'northwest', 'southeast', 'loot',
      'east', 'southeast', 'east', 'southeast', 'west', 'loot',
      'west', 'west', 'southwest', 'west', 'loot',
      'northeast', 'northwest', 'southeast', 'southwest', 'west', 'northeast', 'west', 'west', 'west', 'loot',
      'west', 'west', 'northwest', 'northwest', 'north', 'north', 'north', 'loot',
      'northeast', 'northeast', 'go tunnel', 'northwest', 'loot',
      'northwest', 'north', 'north', 'west', 'go tunnel', 'north', 'north', 'north', 'north', 'north', 'east', 'east', 'east', 'north', 'north', 'north', 'north']

    @poke_path = [
      'south', 'south', 'south', 'south', 'west', 'west', 'west',
      'south', 'south', 'south', 'south', 'south', 'go tunnel',
      'east', 'south', 'south', 'southeast', 'southeast', 'go tunnel', 'southwest', 'southwest', 'south', 'south',
      'north', 'north', 'loot',
      'northeast', 'northeast', 'go tunnel', 'northwest', 'loot',
      'northwest', 'north', 'north', 'west', 'east', 'north', 'loot',
      'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'loot',
      'north', 'southeast', 'loot',
      'south', 'southwest', 'southwest', 'southwest', 'southwest', 'southwest', 'loot',
      'southwest', 'southwest', 'south', 'southeast', 'southeast', 'west', 'east', 'north', 'northwest', 'north', 'loot',
      'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'southwest', 'south', 'southwest', 'loot',
      'southwest', 'southwest', 'southwest', 'southwest', 'northeast', 'east', 'south', 'north', 'southeast', 'north', 'loot',
      'north', 'east', 'north', 'south', 'south', 'southwest', 'southwest', 'northwest', 'loot',
      'southeast', 'go tunnel', 'northeast', 'south', 'northeast', 'northeast', 'northeast', 'loot',
      'north', 'north', 'north', 'northeast', 'northeast', 'loot',
      'northeast', 'northeast', 'east', 'east', 'east', 'east', 'east', 'loot',
      'east', 'southwest', 'west', 'west', 'west', 'west', 'loot',
      'southwest', 'southwest', 'southwest', 'southwest', 'south', 'loot',
      'northeast', 'northeast', 'northeast', 'northeast', 'northeast', 'east', 'southwest', 'southwest', 'southwest', 'loot',
      'southwest', 'southwest', 'south', 'east', 'southwest', 'west', 'north', 'southwest', 'loot',
      'south', 'north', 'southwest', 'southwest', 'southwest', 'southwest', 'loot',
      'west', 'northeast', 'southwest', 'east', 'northeast', 'east', 'northeast', 'east', 'northeast', 'west', 'east', 'loot',
      'northeast', 'northeast', 'northeast', 'northeast', 'loot',
      'north', 'northeast', 'northeast', 'southwest',
      'southwest', 'south', 'southwest', 'southwest', 'southwest', 'southwest',
      'go tunnel', 'east', 'southeast', 'east', 'east', 'southeast', 'southeast',
      'south', 'southeast', 'southeast', 'southeast',
      'south', 'south', 'south', 'southwest', 'southwest', 'loot',
      'west', 'west', 'west', 'west', 'west', 'southwest', 'loot',
      'go tunnel', 'south', 'south', 'west', 'west', 'east', 'east', 'east', 'loot',
      'east', 'west', 'north', 'east', 'east', 'south', 'east', 'north', 'north', 'east', 'loot',
      'east', 'east', 'north', 'east', 'north', 'south', 'south', 'south', 'loot',
      'west', 'south', 'loot',
      'west', 'west', 'north', 'east', 'west', 'west', 'south', 'west', 'north', 'north', 'loot',
      'west', 'west', 'west', 'go tunnel', 'southwest', 'southwest', 'southwest', 'north', 'northeast', 'loot',
      'northeast', 'northeast', 'east', 'east', 'loot',
      'east', 'east', 'northeast', 'loot',
      'go tunnel', 'north', 'loot',
      'west', 'northwest', 'east', 'northwest', 'west', 'northwest', 'east', 'loot',
      'northwest', 'west', 'east', 'north', 'south', 'west', 'southwest', 'southwest', 'west', 'northeast', 'loot',
      'west', 'northeast', 'west', 'northeast', 'east', 'north', 'northeast', 'loot',
      'southwest', 'west', 'west', 'west', 'southwest', 'southwest', 'southwest', 'loot',
      'west', 'northeast', 'southwest', 'west', 'northeast', 'east', 'loot',
      'northeast', 'north', 'east', 'west', 'southwest', 'west', 'southwest', 'loot',
      'go tunnel', 'southwest', 'south', 'southeast', 'east', 'east', 'east', 'northwest', 'loot',
      'east', 'southeast', 'east', 'northwest', 'southeast', 'loot',
      'east', 'southeast', 'east', 'southeast', 'west', 'loot',
      'west', 'west', 'southwest', 'west', 'loot',
      'northeast', 'northwest', 'southeast', 'southwest', 'west', 'northeast', 'west', 'west', 'west', 'loot',
      'west', 'west', 'northwest', 'northwest', 'north', 'north', 'north', 'loot',
      'northeast', 'northeast', 'go tunnel', 'northwest', 'loot',
      'northwest', 'north', 'north', 'west', 'go tunnel', 'north', 'north', 'north', 'north', 'north', 'east', 'east', 'east', 'north', 'north', 'north', 'north']

    @halfling_path = ['west', 'west', 'west', 'east', 'east', 'east', 'south', 'east', 'west', 'north', 'east', 'east', 'east', 'east', 'southwest', 'north', 'west', 'south', 'south', 'southwest', 'north', 'west', 'south', 'west', 'north', 'north', 'west', 'west', 'south', 'south', 'east', 'north', 'east', 'south', 'east', 'south', 'west', 'west', 'west', 'south', 'east', 'east', 'west', 'south', 'north', 'west', 'south', 'south', 'south', 'south', 'south', 'south', 'south', 'east', 'west', 'south', 'east', 'east', 'west', 'south', 'west', 'south', 'north', 'east', 'north', 'west']
  end

  def initialize
    @settings = get_settings
    @junk_list = @settings.maze_junk.map { |x| /\b#{x}/i }

    arg_definitions = [
      [
        { name: 'noloot', regex: /noloot/i, optional: true, description: 'Do tasks and run through the maze only picking up passes.' },
        { name: 'restart', regex: /restart/i, optional: true, description: 'Do tasks, but no searching for loot at all, not even passes.' },
        { name: 'slow', regex: /slow/i, optional: true, description: 'Move through the maze one room at a time, useful for a slow connection.' },
        { name: 'short', regex: /short/i, optional: true, description: 'Do the short 10-task maze run with the harried Halfling.' }
      ],
      [
        { name: 'manual', regex: /manual/i, optional: false, description: 'Walk around the maze on your own, however it will search and loot any incidental points you see.' }
      ]
    ]

    args = parse_args(arg_definitions)
    setup
    if @settings.cornmaze_containers.empty?
      DRC.message('The Script will STOW any loot, but to handle spillover consider adding other containers to your YAML as:')
      DRC.message('cornmaze_containers:')
      DRC.message('- backpack')
      DRC.message('- duffel bag')
      pause 2
    end
    @searching = false if args.restart
    @looting = false if args.noloot
    @slow_movement = args.slow || !['profanity', 'stormfront'].include?($frontend)
    DRCI.stow_hands
    manual_loot if args.manual

    if args.short
      run_short_maze
    else
      run_long_maze
    end
  end

  # --- SHORT MAZE --- #

  def run_short_maze
    Flags.add('maze_done',   "Thanks for all the hard work.  Here's a little something to show my appreciation.")
    Flags.add('task_build',  "find a good spot and BUILD")
    Flags.add('task_search', "I'd like you to SEARCH")
    Flags.add('task_touch',  "I'd like you to find and TOUCH")
    Flags.add('task_forage', "I'd like you to FORAGE")
    Flags.add('task_scream', "let out a good SCREAM")
    Flags.add('task_pull',   "I'd like you to go PULL")
    Flags.add('task_wave',   "You just have to WAVE your hands")
    Flags.add('task_disarm', "I'd like you to DISARM")
    Flags.add('task_poke',   "I'd like you to go find and POKE EMPLOYEEs")

    join_harried_halfling

    until Flags['maze_done'] do
        do_short_task('build')  if Flags['task_build']
        do_short_task('search') if Flags['task_search']
        do_short_task('touch')  if Flags['task_touch']
        do_short_task('forage') if Flags['task_forage']
        do_short_task('scream') if Flags['task_scream']
        do_short_task('pull')   if Flags['task_pull']
        do_short_task('wave')   if Flags['task_wave']
        do_short_task('disarm') if Flags['task_disarm']
        do_short_task('poke')   if Flags['task_poke']
        pause 1
    end

  end

  def join_harried_halfling
    halfling_room = 13245 # harried Halfling
    DRCT.walk_to(halfling_room)
    join_confirm = [
        "Are you SURE you want to do the FAST version",
    ]
    join_success = [
        "A harried Halfling escorts you"
    ]
    join_failure = [
        "What were you referring to?",
    ]
    join_need_pass = [
        "Sorry, I'm quite busy"
    ]
    case DRC.bput("join harried halfling", *join_confirm, *join_success, *join_failure, *join_need_pass)
    when *join_failure
      DRC.message("Unable to join a harried Halfling. Is one here?")
      exit
    when *join_need_pass
      DRC.message("You need to REDEEM a corn maze pass first, then retry this script.")
      exit
    when *join_confirm
        join_harried_halfling
    end
  end

  def do_short_task(task)
    Flags.reset("task_#{task}")
    case task
    when 'poke'
        task = 'poke employee'
    when 'disarm'
        waitrt?
        fput("search")
        task = 'disarm trap'
    end
    waitrt?
    fput("#{task}")
    waitrt?
  end

  # --- LONG MAZE --- #

  def run_long_maze
    DRC.message("WARNING! THE CORN MAZE IS DIFFICULT TO NAVIGATE, AND IT'S ALWAYS POSSIBLE FOR LAG TO BREAK THE SCRIPT. BE MINDFUL OF YOUR PASSES, AND WATCH IT IN CASE YOU NEED TO TAKE CONTROL.")

    Flags.add('maze_done', 'leads you through the twisting passages and brings you to the exit')
    Flags.add('task_done', '10 of 10', '10 of the 10', '5 of the 5', '5 of 5', 'return to one of the Halflings and ASK HALFLING ABOUT TASK again')
    find_start
    get_task
  end

  def wait_for_command
    reset_flags
    Flags.reset('task_done')
    Flags.add('scarecrow', 'need to BUILD SCARECROW')
    Flags.add('mice', 'need to WAVE to scare off the mice')
    Flags.add('weeds', 'need to walk around the maze and PULL WEED')
    Flags.add('traps', 'need to first SEARCH out a trap in each room')
    Flags.add('grasshoppers', 'need to SEARCH in the rooms to find and catch the grasshoppers')
    Flags.add('scream', 'need to move to different rooms in the maze and SCREAM')
    Flags.add('landmarks', 'need to go around finding landmarks')
    Flags.add('tokens', 'move around and SEARCH to find golden tokens')
    Flags.add('corn', 'need to FORAGE CORN inside the maze')
    Flags.add('halflings', 'need to go up to each Halfling and POKE them')
    Flags.add('loot', 'You are not currently on a task in the Corn Maze')

    fput "TASK"
    pause 2
    if Flags['scarecrow']
      scarecrow_task
    elsif Flags['mice']
      mice_task
    elsif Flags['weeds']
      weeds_task
    elsif Flags['traps']
      traps_task
    elsif Flags['grasshoppers']
      grasshopper_task
    elsif Flags['scream']
      scream_task
    elsif Flags['landmarks']
      landmarks_task
    elsif Flags['tokens']
      tokens_task
    elsif Flags['corn']
      corn_task
    elsif Flags['halflings']
      halfling_task
    elsif Flags['loot']
      loot_task
    else
      echo "COMBAT TASK - CANCELING"
    cancel_task
    end
  end

  def cancel_task
    DRC.bput 'TASK CANCEL', 'TASK CANCEL again in 30 seconds', 'Your current task has been canceled'
    DRC.bput 'TASK CANCEL', 'TASK CANCEL again in 30 seconds', 'Your current task has been canceled'
    pause 300
    get_task
  end

  def traps_task
    Flags.add('poisoned', 'You choke and gag on the poisonous gas')
    @maze_path.each do |x|
      exit if Flags['maze_done']
      if !Flags['task_done']
        case DRC.bput('search', 'You don\'t think there are any traps here', 'tiny black dots are jumping around inside', 'You notice', 'already looked for traps around here')
        when 'You notice'
          waitrt?
          bput('disarm trap', 'You attempt to disarm', 'Disarm what')
          pause 1
          waitrt?
          recover_stun
          DRC.fix_standing
        end
        custom_move(x)
      else
        custom_move(x, true)
      end
    end
    echo "TURNING IN TASK!"
    Flags.delete('poisoned')
    finish_task
  end

  def scarecrow_task
    Flags.add('scarecrow_done', 'You put the finishing touches')
    Flags.add('already_built', 'already built a scarecrow here')
    @maze_path.each do |x|
      exit if Flags['maze_done']
      if !Flags['task_done']
        if !DRRoom.room_objs.include? "corn husk scarecrow"
          while !Flags['scarecrow_done'] && !Flags['maze_done']
            fput "build scarecrow"
            pause 1
            waitrt?
          end
        end
      end
      custom_move(x)
      Flags.reset('scarecrow_done')
    end
    finish_task
  end

  def mice_task
    @mice_path.each do |x|
      exit if Flags['maze_done']
      if !Flags['task_done']
        fput 'wave'
        pause 1
        waitrt?
        DRC.fix_standing
        fput "TASK"
        custom_move(x)
      else
        custom_move(x, true)
      end
    end
    echo "TURNING IN TASK!"
    finish_task
  end

  def scream_task
    @scream_path.each do |x|
      exit if Flags['maze_done']
      if x == 'scream'
        wait_on_done_move
        fput "#{x}"
      else
        custom_move(x, true)
      end
    end
    echo "TURNING IN TASK!"
    finish_task
  end

  def weeds_task
    @maze_path.each do |x|
      exit if Flags['maze_done']
      if !Flags['task_done']
        fput 'pull weeds'
        pause 1
        waitrt?
        while !checkstanding
          fput 'stand'
        end
        DRC.fix_standing
        fput "TASK"
        custom_move(x)
      else
        custom_move(x, true)
      end
    end
    echo "TURNING IN TASK!"
    finish_task
  end

  def corn_task
    @maze_path.each do |x|
      exit if Flags['maze_done']
      if !Flags['task_done']
        DRC.bput('forage corn', 'You forage around for a moment', 'You\'ve already looked around here')
        pause 1
        waitrt?
      fput('drop corn') if /corn/ =~ left_hand || /corn/ =~ right_hand
        DRC.fix_standing
        fput "TASK"
        custom_move(x)
      else
        custom_move(x, true)
      end
    end
    echo "TURNING IN TASK!"
    finish_task
  end

  def tokens_task
    @maze_path.each do |x|
      exit if Flags['maze_done']
      if !Flags['task_done']
        fput 'search'
        pause 1
        waitrt?
        DRC.fix_standing
        fput "TASK"
        custom_move(x)
      else
        custom_move(x, true)
      end
    end
    echo "TURNING IN TASK!"
    finish_task
  end

  def grasshopper_task
    @mice_path.each do |x|
      exit if Flags['maze_done']
      if !Flags['task_done']
        fput 'search'
        pause 1
        waitrt?
        DRC.fix_standing
        custom_move(x)
        fput "TASK"
      else
        custom_move(x, true)
      end
    end
    echo "TURNING IN TASK!"
    finish_task
  end

  def landmarks_task
    @landmark_path.each do |x|
      exit if Flags['maze_done']
      if !Flags['task_done']
        if DRRoom.room_objs.count > 0
          touch_room
        end
        custom_move(x)
      else
        custom_move(x, true)
      end
    end
    finish_task
  end

  def touch_room
    targets = DRRoom.room_objs.grep(@landmarks)
    targets.each do |target|
      put("touch #{target.split.last}")
    end
  end

  def halfling_task
    @poke_path.each do |x|
      next if x == 'loot'
      exit if Flags['maze_done']
      if DRRoom.npcs.include? 'Halfling'
        bput('poke halfling', 'You poke a', 'What were you')
        pause 1
        put('TASK')
      end
      if DRRoom.npcs.include? 'Gor\'Tog'
        bput('poke gor\'tog', 'You poke a', 'What were you')
        pause 1
        waitrt?
        recover_stun
        DRC.fix_standing
        pause 1
        put('TASK')
      end
      unless Flags['task_done']
        custom_move(x)
      else
        custom_move(x, true)
      end
    end
    finish_task
  end

  def loot_task
    @searching = false
    @full_path.each do |x|
      exit if Flags['maze_done']
      if x == 'loot'
        wait_on_done_move
        loot_room
      else
        custom_move(x, true)
      end
    end
    finish_task
  end

  def manual_loot
    until Flags['maze_done']
      pause 0.2
      loot_room
    end
    exit
  end

  def loot_room
    pause 0.1 until XMLData.room_count != @last_looted
    targets = DRRoom.room_objs.grep(@searchables)
    targets.each do |target|
      if /manage/ =~ DRC.bput("search #{target.split.last}", "Sadly, you don't find anything", 'You manage to find', 'already been picked clean', 'I could not find what you were referring to', 'not in any condition', 'nothing of special interest about it', 'You ponder that')
        while thing = DRC.left_hand || DRC.right_hand
          if @looting
            case thing
            when *@junk_list
              drop_item(thing)
            else
              stow_thing(thing)
            end
          elsif DRC.left_hand.include?('pass') || DRC.right_hand.include?('pass')
            stow_thing(thing)
          else
            drop_item(thing)
          end
        end
      end
    end
    @last_looted = XMLData.room_count
  end

  def drop_item(item)
    case bput("drop my #{item}", 'You drop', 'would damage it', 'smashing it to bits', 'Something appears different about')
    when 'would damage it', 'Something appears different about'
      drop_item(item)
    end
  end

  def wait_on_done_move
    last_room = XMLData.room_count
    pause 0.5
    while last_room != XMLData.room_count
      last_room = XMLData.room_count
      pause 0.5
    end
  end

  def get_task
    wait_on_done_move
    @halfling_path.each do |x|
      exit if Flags['maze_done']
      if DRRoom.npcs.include? 'Halfling'
        break
      else
        custom_move(x)
      end
    end
    DRC.bput('ask halfling about task', '^A .+ Halfling smiles happily at you', '^To whom')
    echo "Task count = #{@task_count}"
    if @searching == false
      case bput('ask halfling for task', 'A cheerful Halfling smiles happily', 'To whom are you', 'A cheerful Halfling looks at you and says')
      when 'A cheerful Halfling looks at you and says'
        fput('ask halfling for task cancel')
        fput('ask halfling for task cancel')
        return get_task
      end
    end
    @done = false
    find_start
    @done = false
    wait_for_command
  end

  def find_start
    wait_on_done_move
    unless XMLData.room_title.include?('Labyrinth') || XMLData.room_title.include?('Corn Maze, Entrance')
      DRC.message("The script can't find its way back from here! Open up ;narost, right click it and open the Corn Maze map, or use elanthipedia, then make your way back towards the northwest Labyrinth then unpause the script!")
      5.times do
        DRC.beep
        pause 2
      end
      pause_script('corn-maze')
    end
    until @done
      exit if Flags['maze_done']
      find_exits = DRC.bput("look",/Obvious paths: .*\./,)
      exits = find_exits.match(/^Obvious paths: (.*)\./).to_a[1].split(', ')
      if (exits.include? 'north')
        custom_move 'north'
      elsif (exits.include? 'east')
        custom_move 'east'
      elsif (exits.include? 'south')
        custom_move 'south'
        custom_move 'south'
        custom_move 'east'
      elsif exits.include?('west') && !exits.include?('southwest') && !exits.include?('east') && !exits.include?('south') && !exits.include?('north') && !exits.include?('southeast') && !exits.include?('northwest') && !exits.include?('northeast')
        custom_move 'west'
        custom_move 'west'
      elsif ((exits.include? 'west') && (exits.include? 'southwest'))
        custom_move 'west'
        custom_move 'west'
        custom_move 'west'
        custom_move 'west'
        @done = true
      end
    end
  end

  def finish_task
    reset_flags
    @task_count = @task_count + 1
    get_task
  end

  def reset_flags
    # Long maze flags
    Flags.reset('scarecrow')
    Flags.reset('mice')
    Flags.reset('weeds')
    Flags.reset('traps')
    Flags.reset('grasshoppers')
    Flags.reset('scream')
    Flags.reset('landmarks')
    Flags.reset('tokens')
    Flags.reset('corn')
    Flags.reset('halflings')
    Flags.reset('loot')
    # Short maze flags
    Flags.reset('task_build')
    Flags.reset('task_search')
    Flags.reset('task_touch')
    Flags.reset('task_forage')
    Flags.reset('task_scream')
    Flags.reset('task_pull')
    Flags.reset('task_wave')
    Flags.reset('task_disarm')
    Flags.reset('task_poke')
  end

  def custom_move(dir, fast=false)
    DRC.fix_standing
    DRC.retreat if Time.now - @last_move > 8
    if fast && !@slow_movement
      put dir
      @current_type_ahead += 1
      if @type_ahead_size < @current_type_ahead
        pause 0.35
        @current_type_ahead = 0
      end
    else
      move dir
    end
    @last_move = Time.now
  end

  def stow_thing(thing)
    @settings.cornmaze_containers.each do |container|
      return if DRC.bput("put #{thing} in my #{container}", 'You put', 'What were you', 'There isn\'t any more room', 'too long', 'You just can\'t get') == 'You put'
    end
    return if DRC.bput("stow #{thing}", 'You put', 'What were you', 'There isn\'t any more room', 'Stow what', 'too long', 'That cannot be placed') == 'You put'
    pause 1
    DRC.message("YOU'VE RUN OUT OF ROOM!  GET SOME MORE SPACE, YOU LAZY SLOB!")
    DRC.bput("drop #{thing}", 'You drop', 'What were you')
  end

  def recover_stun
    return if bput('stand', 'You are already standing', 'You are still stunned', 'You stand back up', 'You can\'t do that') == 'You are already standing'
    pause 3
    recover_stun
  end
end

before_dying do
  # Long maze flags
  Flags.delete('scarecrow')
  Flags.delete('mice')
  Flags.delete('weeds')
  Flags.delete('traps')
  Flags.delete('grasshoppers')
  Flags.delete('scream')
  Flags.delete('landmarks')
  Flags.delete('tokens')
  Flags.delete('corn')
  Flags.delete('halflings')
  Flags.delete('loot')
  Flags.delete('maze_done')
  Flags.delete('poisoned')
  Flags.delete('already_built')
  Flags.delete('scarecrow_done')
  Flags.delete('task_done')
  # Short maze flags
  Flags.delete('task_build')
  Flags.delete('task_search')
  Flags.delete('task_touch')
  Flags.delete('task_forage')
  Flags.delete('task_scream')
  Flags.delete('task_pull')
  Flags.delete('task_wave')
  Flags.delete('task_disarm')
  Flags.delete('task_poke')
end

CornMaze.new
