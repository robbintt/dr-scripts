=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#theurgy
=end

custom_require.call(%w[common common-arcana common-crafting common-items common-money common-travel events drinfomon spellmonitor equipmanager])

class TheurgyActions
  include DRC
  include DRCC
  include DRCI
  include DRCT
  include DRCM
  include DRCA

  def initialize(settings)
    @settings = settings
    @hometown = @settings.hometown
    all_theurgy_data = get_data('theurgy')
    @data = all_theurgy_data[@hometown]
    @immortal_to_aspect = all_theurgy_data['immortal_to_aspect']
    @safe_room = @settings.safe_room
    @immortal_aspect = @settings.immortal_aspect

    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.engineering_belt
    @theurgy_supply_container = @settings.theurgy_supply_container
    @water_holder = @settings.water_holder
    @flint_lighter = @settings.flint_lighter

    (@prayer_mat = @settings.prayer_mat) if @settings.theurgy_use_prayer_mat
    @prayer_mat_room = @settings.theurgy_prayer_mat_room

    @known_spells = check_spells
    @rituals = get_rituals
    @communes = get_communes

    @item_info = collect_item_info(@rituals + @communes)

    @rituals.reject! do |r|
      r[:items].any? { |i| !i[:on_hand] && !i[:shop] }
    end
    @communes.reject! do |c|
      c[:items].any? { |i| !i[:on_hand] && !i[:shop] }
    end
  end

  def get_rituals
    rituals = all_rituals
    blacklist = @settings.theurgy_blacklist
    rituals.reject! { |r| blacklist.include? r[:method].to_s }
    whitelist = @settings.theurgy_whitelist
    rituals.select! { |r| whitelist.include? r[:method].to_s } unless whitelist.empty?
    rituals
  end

  def all_rituals
    rituals = []
    if @data['almsbox'] && @settings.tithe
      rituals << {
        method: :tithe
      }
    end
    if @hometown == 'Crossing'
      if DRStats.circle >= 30
        rituals << {
          method: :study_wall
        }
      end
      rituals << {
        method: :refectory
      }
    end
    if DRSkill.getrank('Mechanical Lore') > 140 && @immortal_aspect &&
       @data['limb_foraging'] && @known_spells.include?('Bless')
      rituals << {
        method: :carve_bead,
        items: [
          {
            name: @settings.theurgy_bead_carving_tool || 'carving knife',
            any_container: true
          }, {
            name: 'shaper',
            any_container: true
          }, {
            name: 'prayer chain',
            any_container: true
          }
        ]
      }
    end
    if @data['gather_sirese'] && @data['plant_sirese']
      rituals << {
        method: :sirese_seed
      }
    end
    if @data['bath']
      herbs = @data['herbs'] || %w[sage lavender]
      rituals << {
        method: :bathe,
        items: herbs.map { |h| { name: h, shop: @data['herb_shop'] } }
      }
    end
    rituals << {
      method: :pray_badge
    }
    if @data['altar'] && !@prayer_mat
      if @immortal_aspect
        rituals << {
          method: :meditate_bead,
          items: [
            { name: 'prayer chain', any_container: true }
          ]
        }
      end
      rituals << {
        method: :clean_altar
      }
      rituals << {
        method: :recite_prayer
      }
    end
    if @data['altar'] || @prayer_mat
      rituals << {
        method: :kiss_altar
      }
      if DRStats.circle >= 10
        rituals << {
          method: :dance
        }
      end
      rituals << {
        method: :incense,
        items: [
          {
            name: 'incense',
            shop: @data['incense_shop'],
            stackable: true,
            parts: 10
          }, {
            name: 'flint',
            shop: @data['flint_shop']
          }
        ]
      }
      rituals << {
        method: :wine,
        items: [
          {
            name: 'wine',
            shop: @data['wine_shop']
          }
        ]
      }
    end
    rituals << {
      method: :clean_anloral
    }
    rituals << {
      method: :embarass_myself,
      items: [
        {
          name: 'golden parchment',
          shop: @data['parchment_shop']
        }
      ]
    }

    rituals
  end

  def get_communes
    communes = []
    if DRStats.circle > 3 && DRSkill.getrank('Outdoorsmanship') > 20 && @data['dirt_foraging']
      communes << {
        name: :eluned,
        method: :commune_eluned
      }
    end
    if DRStats.circle > 60
      truffenyi_commune = {
        name: :truffenyi,
        method: :commune_truffenyi,
        items: []
      }
      unless @known_spells.include? 'Glythtide\'s Gift'
        truffenyi_commune[:items] << {
          name: 'taffelberries',
          shop: @data['taffelberry_shop']
        }
      end
      communes << truffenyi_commune
    end
    if DRStats.circle > 2
      communes << {
        name: :tamsine,
        method: :commune_tamsine
      }
    end
    if DRStats.circle > 8
      communes << {
        name: :kertigen,
        method: :commune_kertigen,
        items: [
          {
            name: 'oil',
            shop: @data['oil_shop'],
            stackable: true,
            parts: 5
          }
        ]
      }
    end
    communes
  end

  def check_spells
    relevant_spells = ['Bless', 'Glythtide\'s Gift']

    relevant_spells.select do |spell|
      bput('spells', spell, 'You can use SPELL STANCE') == spell
    end
  end

  def last_favor_aspect
    favor_re = /Your most recent favor was granted by (.*)\./
    match = bput('favor', 'You are not currently favored', favor_re)
    return unless favor_re.match(match)

    last_favor_god = Regexp.last_match[1]
    @immortal_to_aspect[last_favor_god]
  end

  def collect_item_info(data)
    data.each { |datum| datum[:items] ||= [] }
    items = data.map { |d| d[:items] }.flatten.uniq { |i| i[:name] }
    item_info = {}
    items.each do |i|
      item_count = count(i)
      supply_levels = @settings.theurgy_supply_levels[i[:name]] || {}
      item_info[i[:name]] = {
        name: i[:name],
        shop: i[:shop],
        stackable: i[:stackable],
        parts: (i[:shop] && i[:shop]['parts']) || i[:parts] || 1,
        count: item_count,
        on_hand: item_count > 0,
        restock: item_count < (supply_levels['min'] || 1),
        target: supply_levels['target'] || 1
      }
    end

    item_info
  end

  def rituals_remain?
    !@rituals.empty?
  end

  def count(item)
    if item[:stackable]
      if item[:any_container]
        count_item_parts(item[:name])
      else
        count_item_parts("#{item[:name]} in my #{@theurgy_supply_container}")
      end
    elsif item[:any_container]
      count_items(item[:name])
    else
      count_items_in_container(item[:name], @theurgy_supply_container)
    end
  end

  def holy_water?
    DRCI.get_item_safe(@water_holder, @theurgy_supply_container)
    DRCI.inside?('holy water', @water_holder)
  end

  def buy_supplies
    items_to_buy = @item_info.values.select { |item| item[:restock] && item[:shop] }
    items_to_buy.sort_by! { |item| item[:shop]['id'] }

    total_cost = items_to_buy.map { |i| i[:shop]['price'] }.reduce(:+)
    ensure_copper_on_hand(total_cost + 300, @settings) unless items_to_buy.empty?

    unless holy_water?
      walk_to(@data['holy_water']['id'])
      bput("get my #{@water_holder} in #{@theurgy_supply_container}", 'You get', 'You are already','What were you')
      pause 0.1 while bput("fill #{@water_holder} with water from #{@data['holy_water']['noun']}", 'You fill', 'There is no more room') == 'You fill'
      DRCI.put_away_item?(@water_holder, @theurgy_supply_container)
      stow_hands
    end

    items_to_buy.each do |item|
      shop = item[:shop]
      if shop['method'] &&
         !purchase_method_whitelist.include?(shop['method'])
        echo "method #{shop['method']} not whitelisted"
        next
      end

      if item[:name] == 'incense' && DRCI.get_item_safe('burnt incense', @theurgy_supply_container)
        # Otherwise this will mess up counting/stacking
        dispose_trash('burnt incense')
        item[:count] = 0
      end

      num_to_buy = ((item[:target] - item[:count]) / item[:parts].to_f).ceil

      safe_walk_to shop['id']
      if item[:stackable]
        num_to_buy.times do
          buy_single_supply(item, shop)
          DRCI.get_item_safe(item[:name], @theurgy_supply_container)
          bput("combine #{item[:name]} with #{item[:name]}",
               'You combine', 'You can\'t combine', 'You must be holding')
          # Put this back in the container so it doesn't interfere with bless.
          DRCI.put_away_item?(item[:name], @theurgy_supply_container)
        end
      else
        (item[:target] - item[:count]).times do
          buy_single_supply(item, shop)
          DRCI.put_away_item?(item[:name], @theurgy_supply_container)
        end
      end

      item[:count] += num_to_buy * item[:parts]
    end
  end

  def buy_single_supply(item, shop)
    if shop['method']
      send(shop['method'])
    else
      DRCT.buy_item(shop['id'], item[:name])
    end

    return unless shop['needs_bless'] && @known_spells.include?('Bless')

    complete_or_interrupt_research
    cast_spell({ 'abbrev' => 'bless',
                 'mana' => 1,
                 'prep_time' => 2,
                 'cast' => "cast my #{item[:name]}" }, @settings)
    continue_research
  end

  def purchase_method_whitelist
    %w[buy_taffelberries
       buy_parchment
       buy_wine_shard
       buy_oil_hib]
  end

  def buy_taffelberries
    bput('order 14',
         'puts some sugar-dipped taffelberries on the bar',
         'You don\'t have enough money to afford that')
    fput 'get taffelberries'
  end

  def buy_parchment
    bput('read placard', 'The placard reads')
    pause 1
    bput('order 4 from monk', 'You decide to purchase the parchment',
         'You realize you don\'t have enough')
    bput('unroll my parchment', 'You reverently unroll',
         'I could not find', 'What were you referring to')
  end

  def buy_wine_shard
    bput('order 10', 'The publican places a flute',
         'You don\'t have enough money to afford that')
    bput('get wine on bar', 'You get a flute', 'What were you referring')
  end

  def buy_oil_hib
    bput('buy oil in chest', 'You decide to purchase', 'You realize you don\'t have enough')
  end

  def perform_next_action
    perform_next_ritual unless perform_next_commune
  end

  def safe_walk_to(id)
    roll_prayer_mat
    walk_to id
  end

  def walk_to_altar_or_prayer_mat
    return if @mat_unrolled

    if @prayer_mat
      walk_to @prayer_mat_room['id'] if @prayer_mat_room
      stow_hands
      DRCI.get_item_safe(@prayer_mat, @theurgy_supply_container)
      bput("unroll #{@prayer_mat}",
           'reverently lay your', 'need to be holding that first')
      @mat_unrolled = true
    else
      walk_to @data['altar']['id']
    end
  end

  def roll_prayer_mat
    return unless @mat_unrolled

    stow_hands
    bput("roll #{@prayer_mat}",
         'carefully gather up',
         'need to be holding that first', 'not on the ground')
    DRCI.put_away_item?(@prayer_mat, @theurgy_supply_container)
    @mat_unrolled = false
  end

  ### COMMUNES ###
  def perform_next_commune
    @communes.size.times do
      return false unless can_commune?
      commune = @communes.first
      @communes.rotate!
      return true if commune_ready?(commune) && perform_commune(commune)
    end
    false
  end

  def commune_ready?(commune)
    !Flags["theurgy-#{commune[:name]}"]
  end

  def can_commune?
    return false if @communes.empty?
    return true unless Flags['theurgy-commune']
    Flags['theurgy-commune'].to_a.include?(
      'fully prepared to seek assistance from the Immortals once again'
    )
  end

  def perform_commune(commune)
    stow_hands
    # Recheck item presence since supplies may have been used up.
    return false if commune[:items].any? { |i| count(i).zero? }

    send(commune[:method])
  end

  def commune_eluned
    safe_walk_to @data['dirt_foraging']['id']
    if forage?('dirt', 5)
      DRCI.get_item_safe(@water_holder, @theurgy_supply_container)
      match = bput('commune eluned',
                   'completed this commune too recently',
                   'You struggle to commune',
                   'you have attempted a commune too recently in the past',
                   'You grind some dirt in your fist')
      DRCI.put_away_item?(@water_holder, @theurgy_supply_container)
      if [left_hand, right_hand].include?('dirt')
        bput('drop dirt', 'You drop some',
             'But you aren\'t holding',
             'What were you referring')
      end
      return match == 'You grind some dirt in your fist'
    else
      return false
    end
  end

  def commune_tamsine
    return false unless holy_water?

    pause 1
    waitrt?
    DRCI.get_item_safe(@water_holder, @theurgy_supply_container)
    bput("sprinkle #{@water_holder} on #{checkname}", 'You sprinkle yourself',
         'Sprinkle what?')
    match = bput('commune tamsine',
                 'completed this commune too recently',
                 'You struggle to commune',
                 'you have attempted a commune too recently in the past',
                 'You feel warmth spread throughout your body')
    DRCI.put_away_item?(@water_holder, @theurgy_supply_container)

    match == 'You feel warmth spread throughout your body'
  end

  def commune_truffenyi
    stow_hands

    offered_item = nil
    if DRCI.inside?('taffelberries', @theurgy_supply_container)
      offered_item = 'taffelberries'
      DRCI.get_item_safe('taffelberries', @theurgy_supply_container)
    elsif @known_spells.include? 'Glythtide\'s Gift'
      complete_or_interrupt_research
      Flags.add('theurgy-gg-drink',
                /hearty chuckle as .*?(\w+) appears in your (?:right|left) hand!/,
                'Both your hands are full!')
      cast_spell({ 'abbrev' => 'gg',
                   'mana' => 5,
                   'prep_time' => 2,
                   'cast' => 'cast drink' }, @settings)
      if Flags['theurgy-gg-drink'] &&
         !Flags['theurgy-gg-drink'].to_a.include?('Both your hands are full!')
        offered_item = Flags['theurgy-gg-drink'][1]
      end
      Flags.delete('theurgy-gg-drink')
      return false unless offered_item
      continue_research
    else
      return false
    end

    bput('commune truffenyi',
         'completed this commune too recently',
         'you have attempted a commune too recently in the past',
         'The power of Truffenyi has answered your prayer')
    pause 1
    if right_hand.include? 'orb'
      fput 'drop orb'
      return true
    elsif offered_item == 'taffelberries'
      fput 'get taffelberries'
      DRCI.put_away_item?('taffelberries', @theurgy_supply_container)
    else
      bput("drop #{offered_item}", 'You drop',
           'What were you referring', 'But you aren\'t holding')
    end
    false
  end

  def commune_kertigen
    if DRCI.inside?('holy oil', @theurgy_supply_container)
      DRCI.get_item_safe('holy oil', @theurgy_supply_container)
    elsif @known_spells.include? 'Bless'
      DRCI.get_item_safe('some oil', @theurgy_supply_container)
      complete_or_interrupt_research
      cast_spell({ 'abbrev' => 'bless',
                   'mana' => 1,
                   'prep_time' => 2,
                   'cast' => 'cast oil' }, @settings)
      continue_research
    else
      return false
    end

    if right_hand.include? 'holy oil'
      bput("sprinkle oil on #{checkname}", 'You sprinkle yourself',
           'Sprinkle what?')
      DRCI.put_away_item?('oil', @theurgy_supply_container)
      match = bput('commune kertigen',
                   'completed this commune too recently',
                   'you have attempted a commune too recently in the past',
                   'The thick smell of ozone fills your nostrils')
      return match =~ /ozone/
    else
      stow_hands
      return false
    end
  end

  ### RITUALS ###
  def perform_next_ritual
    perform_ritual(@rituals.shift) if rituals_remain?
  end

  def perform_ritual(ritual)
    send(ritual[:method])
  end

  def tithe
    if UserVars.tithe_timer
      return false unless Time.now - UserVars.tithe_timer > 60 * 10
    end
    return false unless withdraw_exact_amount?('5 silver', @hometown)

    safe_walk_to @data['almsbox']['id']
    UserVars.tithe_timer = Time.now
    # TODO: does almsbox name vary by location?
    bput("put 5 silver #{hometown_currency(@hometown)} in almsbox",
         'You drop', 'But you do not')
  end

  def study_wall
    get_data('spells').spell_data do |name, properties|
      if properties['cyclic'] && DRSpells.active_spells.keys.include?(name)
        return false
      end
    end

    safe_walk_to '5872'
    move 'go stair'
    waitfor 'Four beautifully detailed figures'
    safe_walk_to '5846'
    case bput('pull candle',
              'You tug at the silver candlestick but it',
              'You grasp hold of the silver candlestick and pull it back')
    when 'You grasp hold of the silver candlestick and pull it back'
      case bput('study wall',
                'Turning your attention to the sigils',
                'interrupt your research')
      when 'Turning your attention to the sigils'
        waitfor 'as your understanding of the sigils gradually slips away.'
      when 'interrupt your research'
        echo 'Researching - skipping Study'
      end
      pause
      move 'go hatch'
    end
    safe_walk_to '5756'
    move 'go stair'
    waitfor 'A low relief has been carefully carved'
    true
  end

  def refectory
    safe_walk_to '5988'
    bput('meditate', 'You bow your head and contemplate')
    waitrt?
    true
  end

  def get_item(name)
    get_crafting_item(name, @bag, @bag_items, @belt)
  end

  def carve_bead
    return false unless holy_water?
    safe_walk_to @data['limb_foraging']['id']
    stow_hands

    unless get_prayer_chain?
      echo 'No Prayer Chain Found - Skipping Bead Carve'
      return false
    end

    if count_prayer_beads >= 10
      replace_prayer_chain
      return false
    end
    DRCI.put_away_item?('prayer chain', @theurgy_supply_container)

    complete_or_interrupt_research
    prepare?('bless', 1)
    forage? 'limb'
    DRCI.get_item_safe(@water_holder, @theurgy_supply_container)
    bput("sprinkle #{@water_holder} on my limb", 'You sprinkle')
    DRCI.put_away_item?(@water_holder, @theurgy_supply_container)
    pause 1
    cast?('cast my limb')
    continue_research
    get_item('carving knife')
    while right_hand.include? 'limb'
      bput('carve my limb with my knife',
           'You begin to hack', 'With fluid strokes, you', 'You continue to whittle',
           'narrowing the connection', 'With a final deep cut')
      waitrt?
    end
    DRCC.stow_crafting_item('carving knife', @bag, @belt)
    DRCC.get_crafting_item('shaper', @bag, @belt)
    while right_hand.include? 'block'
      # TODO: Change to bput.  Need complete messaging.  Messages include:
      # You (clumsily|confidently) begin shaping your
      # run the shaper over the surface
      # You work at shaping
      # you slowly scape and scratch
      # continue to carefully buff
      # continue to carve at its surface
      # continue to shape the surface
      # You focus (adj) on bringing out the details
      # you place the last finishing touch
      fput("shape my block to #{@immortal_aspect}")
      pause 1
      waitrt?
    end
    DRCC.stow_crafting_item('shaper', @bag, @belt)
    DRCI.get_item_safe('prayer chain', @theurgy_supply_container)
    bput("put #{@immortal_aspect} bead on prayer chain",
         'You carefully thread', 'What were you referring to')

    replace_prayer_chain
    true
  end

  def meditate_bead
    return false unless get_prayer_chain?
    if count_prayer_beads.zero?
      replace_prayer_chain
      return false
    end
    safe_walk_to @data['altar']['id']
    fput 'kneel'
    bput('meditate my prayer chain', 'You clutch')
    waitfor 'suddenly detaches from your prayer bead chain'
    fix_standing
    replace_prayer_chain
    waitrt?
    true
  end

  def get_prayer_chain?
    case bput('get prayer chain', 'You get', 'I could not find',
              'What were you referring to', 'already in your inventory')
    when 'I could not find', 'What were you referring to'
      return false
    when 'already in your inventory'
      fput 'remove my prayer chain'
      @worn_chain = true
    end
    true
  end

  def count_prayer_beads
    beads = bput('look at my chain',
                 /^Strung on to the prayer bead chain you see .*\./,
                 'There are currently no beads on it.')
    list_to_nouns(
      beads.match(/^Strung on to the prayer bead chain you see (.*)\./).to_a[1]
    ).count
  end

  def replace_prayer_chain
    if @worn_chain
      bput('wear prayer chain', 'You attach',
           'You are already wearing that', 'Wear what?')
    else
      DRCI.put_away_item?('prayer chain', @theurgy_supply_container)
    end
  end

  def sirese_seed
    return false unless holy_water?
    safe_walk_to @data['gather_sirese']['id']

    exit unless (DRRoom.npcs - @settings.ignored_npcs).empty? # Invasion check
    waitrt? while bput('gather seed',
                       'You find a tiny',
                       'This is not a good',
                       'You come up empty') == 'You come up empty'
    waitrt?
    safe_walk_to @data['plant_sirese']['id']
    bput('plant seed', 'You carefully dig a hole')
    DRCI.get_item_safe(@water_holder, @theurgy_supply_container)
    bput("sprinkle #{@water_holder} on room", 'You sprinkle some holy water')
    DRCI.put_away_item?(@water_holder, @theurgy_supply_container)
    true
  end

  def bathe
    safe_walk_to @data['bath']['id']
    (@data['bath']['path_in'] || []).each { |dir| move(dir) }
    (@data['herbs'] || %w[sage lavender]).each do |herb|
      DRCI.get_item_safe(herb, @theurgy_supply_container)
      fput "rub my #{herb}"
      pause 1
    end
    waitfor 'You wake up once more, blinking dazedly.'
    # waitfor @data['bath']['room_name']
    fix_standing
    (@data['bath']['path_out'] || []).each { |dir| move(dir) }
    true
  end

  def pray_badge
    case bput('remove pilgrim badge', 'You take off', 'Remove what')
    when 'You take off'
      fput 'pray pilgrim badge'
      pause 2
      waitrt?
      bput 'wear pilgrim badge', 'You put on a', 'You are already'
    when 'Remove what'
      return false if bput('get badge', 'You get', 'I could not find', 'What were you referring to') != 'You get'
      fput 'pray pilgrim badge'
      pause 2
      waitrt?
      DRCI.put_away_item?('pilgrim badge', @theurgy_supply_container)
    end
    true
  end

  def dance
    walk_to_altar_or_prayer_mat
    end_conds =  ['flawless performance to those on high',
                  'In your condition',
                  'Your dance reaches its conclusion']
    all_messages = end_conds + ['You begin to dance',
                                'Your actions grow',
                                'Your dance',
                                'but you falt']
    until end_conds.include? bput("dance #{@prayer_mat}", *all_messages)
      pause 1
      waitrt?
      fix_standing
    end
    true
  end

  def incense
    walk_to_altar_or_prayer_mat
    bput("get #{@flint_lighter}",
         'You get', 'I could not find', 'What were you referring to')
    if DRCI.inside?('burnt incense', @theurgy_supply_container)
      # If we have multiple stacks, use the burnt stack first.
      DRCI.get_item_safe('burnt incense', @theurgy_supply_container)
    else
      DRCI.get_item_safe('incense', @theurgy_supply_container)
    end

    waitrt? while bput('light my incense with flint',
                       'nothing happens',
                       'bursts into flames',
                       'much too dark in here to do that') == 'nothing happens'
    waitrt?
    fput "wave incense at #{@prayer_mat || 'altar'}"
    fput 'snuff incense'
    DRCI.put_away_item?('incense', @theurgy_supply_container)
    stow_hands
    pause 1
    true
  end

  def wine
    walk_to_altar_or_prayer_mat
    DRCI.get_item_safe('wine', @theurgy_supply_container)
    if @prayer_mat
      fix_standing
      bput("kneel #{@prayer_mat}", 'You humbly kneel')
    end
    bput("pour wine on #{@prayer_mat || 'altar'}",
         'You quietly pour', 'Pour what')
    fix_standing
    DRCI.put_away_item?('wine', @theurgy_supply_container)
    true
  end

  def recite_prayer
    safe_walk_to @data['altar']['id']
    fput "recite Meraud, power the holy fires that unleash my righteous vengeance;Chadatru, guide my sword to swing in justice;Everild, give me the power to conquer my enemies;Truffenyi, let me not lose sight of compassion and mercy;Else, I will become like those I despise;Urrem'tier, receive into your fetid grasp these wicked souls;May the Tamsine's realms never know their evil ways again;May all the Immortals guide your faithful soldier #{checkname}."
    pause 1
    waitrt?
  end

  def clean_altar
    return false unless holy_water?
    safe_walk_to @data['altar']['id']
    DRCI.get_item_safe(@water_holder, @theurgy_supply_container)
    fput 'clean altar with holy water'
    waitfor 'You finish your job'
    DRCI.put_away_item?(@water_holder, @theurgy_supply_container)
    waitrt?
    true
  end

  def kiss_altar
    walk_to_altar_or_prayer_mat
    if @prayer_mat
      fix_standing
      bput("kneel #{@prayer_mat}", 'You humbly kneel')
    else
      bput('kneel', 'You kneel down', 'Subservient type')
    end
    bput("kiss #{@prayer_mat || 'altar'}", 'You bend forward to kiss')
    fix_standing
    true
  end

  def clean_anloral
    aspect = last_favor_aspect
    return false unless aspect
    description = "#{aspect} pin"
    dirty_matches = ['A thin layer of dust', 'streaks of clumped dust',
                     'thickly caked grime']
    match = bput("look my #{description}",
                 'It is clean', 'I could not find', *dirty_matches)

    return false unless dirty_matches.include?(match)
    return false unless holy_water?

    DRCI.get_item_safe(@water_holder, @theurgy_supply_container)
    bput("clean #{description} with holy water",
         'You pour some holy water', 'You need to be holding',
         'The immaculate anloral', 'That doesn\'t appear')
    waitrt?
    DRCI.put_away_item?(@water_holder, @theurgy_supply_container)
    true
  end

  def embarass_myself
    return unless DRCI.inside?('parchment', @theurgy_supply_container)
    safe_walk_to @safe_room
    DRCI.get_item_safe('golden parchment', @theurgy_supply_container)
    fput 'invoke my parchment'
    waitfor 'You conclude'
    DRCI.put_away_item?('golden parchment', @theurgy_supply_containe)
  end

  ### RESEARCH ###
  def complete_or_interrupt_research
    research_types = %w[Fundamental Augmentation Stream Sorcery Utility Warding]
    project_match = bput('research status',
                         / (\d+)% complete with a portion .*\./,
                         'not researching anything', 'project about')
    return if project_match =~ /not researching anything/

    @research_topic = research_types.find { |r| project_match =~ /#{r}/i }
    return unless project_match =~ /complete with a portion/

    percent_complete = project_match[1, 2].to_i
    if percent_complete >= 60
      wait_time = (101 - project_match[1, 2].to_i) * 3
      Flags.reset('research_done')
      pause wait_time
    else
      echo 'stopping research'
      fput 'RESEARCH CANCEL'
    end
  end

  def continue_research
    return unless @research_topic && !Flags['research_done']

    fput "RESEARCH #{@research_topic.upcase} 300"
  end
end

class Theurgy
  include DRC

  def pray
    waitrt?
    if @favor_god
      bput("pray #{@favor_god}", @favor_god, 'Lady of healing', 'reward of hard effort', 'sign with your hand', 'god of the Void', 'bane of accursed', 'blessing be upon your love', 'honorable and true', 'glory shine on us', 'fire across the lands', 'madness and pain', 'floods strike down', 'Lady of supreme beauty')
    else
      bput('pray meraud', 'meraud')
    end
    waitrt?
  end

  def initialize
    settings = get_settings

    @favor_god = settings.favor_god
    @theurgy_exp_threshold = settings.theurgy_exp_threshold

    Flags.add('theurgy-commune', 'fully prepared to seek assistance from the Immortals once again', 'You will not be able to open another divine conduit yet', 'You grind some dirt in your fist', 'You feel warmth spread throughout your body', 'The power of Truffenyi has answered your prayer', 'The thick smell of ozone fills your nostrils', 'You stop as you realize that you have attempted a commune too recently in the past.')
    Flags.add('theurgy-eluned', 'You grind some dirt in your fist', 'The waters of Eluned are still in your thoughts')
    Flags.add('theurgy-tamsine', 'You feel warmth spread throughout your body', 'You have been recently enlightened by Tamsine')
    Flags.add('theurgy-truffenyi', 'The power of Truffenyi has answered your prayer', 'You are still captivated by Truffenyi\'s favor')
    Flags.add('theurgy-kertigen', 'The thick smell of ozone fills your nostrils', 'The sounds of Kertigen\'s forge still ring in your ears')
    Flags.add('research_done', '^Breakthrough!')

    @actions = TheurgyActions.new(settings)

    pray
    @actions.buy_supplies
    @actions.perform_next_action while @actions.rituals_remain? && should_continue?
    @actions.roll_prayer_mat

    fput 'commune'
  end

  def should_continue?
    if (@theurgy_exp_threshold || 0) > 0
      DRSkill.getxp('Theurgy') < @theurgy_exp_threshold
    else
      # No exp threshold means run until done.
      true
    end
  end
end

before_dying do
  Flags.delete('theurgy-commune')
  Flags.delete('theurgy-eluned')
  Flags.delete('theurgy-tamsine')
  Flags.delete('theurgy-truffenyi')
  Flags.delete('theurgy-kertigen')
  Flags.delete('research_done')
end

Theurgy.new
