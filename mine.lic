=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#mine
=end

custom_require.call(%w[common equipmanager events common-travel])

class Mine
  include DRC
  include DRCT

  def initialize
    setup

    get_mining_tool

    bput('prospect', 'roundtime', 'You carefully scan')

    @multiplier = @mining_implement =~ /pick/i ? 4 : 5

    mine(@multiplier * resource_level)
    while bput('prospect careful', 'roundtime', 'You carefully scan')
      bput('prospect', 'roundtime', 'You carefully scan')
      results = reget(10, 'can be mined here')
      waitrt?
      break if results.nil?
      mine(@multiplier * resource_level)
    end

    store_mining_tool
  end

  def resource_level
    case Flags['resource-level'][0]
    when 'certain a scattering of resources', 'scattering of resources (0/5) remains to be found'
      1
    when 'enormous quantity remains to be found', 'enormous quantity (5/5) remains to be found'
      6
    when 'substantial quantity remains to be found', 'substantial quantity (4/5) remains to be found'
      5
    when 'good quantity remains to be found', 'good quantity (3/5) remains to be found'
      4
    when 'decent quantity remains to be found', 'decent quantity (2/5) remains to be found'
      3
    when 'small quantity remains to be found', 'small quantity (1/5) remains to be found'
      2
    end
  end

  def handle_danger
    fput('exit') if Flags['mine-exit']
    fix_standing

    if bleeding?
      snapshot = Room.current.id
      bput("get #{@mining_implement}", 'You get', 'You are already')
      store_mining_tool
      wait_for_script_to_complete('safe-room')
      walk_to(snapshot)
      if @mining_skip_populated && !DRRoom.pcs.empty?
        DRC.message("Returned from healing and another player is in the room. Returning to mining-buddy to move on!")
      end
      get_mining_tool
    end

    return unless Flags['mine-danger']
    waitrt?
    until /danger|find nothing of concern/ =~ bput('prospect danger', 'Unfortunately', 'shown a way to significantly reduce the danger', 'find nothing of concern')
      pause
      waitrt?
    end
    Flags.reset('mine-danger')
  end

  def mine(count)
    waitrt?
    handle_danger

    if count.zero?
      bput('prospect', 'roundtime', 'You carefully scan')
      results = reget(10, 'can be mined here')
      waitrt?
      return if results.nil?
      mine(@multiplier * resource_level)
      return
    end

    bput('mine', 'roundtime')
    pause @mining_attempt_timer
    waitrt?

    @loot_list.each do |item|
      matches = DRRoom.room_objs.grep(/(?:\b|^)#{item}(?:\b|$)/i)
      matches.each do |match|
        next if @ignored_rock_sizes.any? { |x| match =~ /\b#{x}\b/i }
        noun = match.scan(/\w+/).last
        if @use_packet && @ignored_deed.none? { |x| match =~ /\b#{x}\b/i } && packet?
          bput("push #{item} #{noun} with my packet", 'You push')
          bput('stow my packet', 'You put', 'Stow what')
          bput('stow deed', 'You put')
        else
          bput("stow #{noun}", 'You put')
        end
      end
    end

    mine(count - 1)
  end

  def packet?
    bput('get my packet', 'You get', 'What were you referring to') == 'You get'
  end

  def get_mining_tool
    if @forging_belt['items'].grep(/#{@mining_implement}/i).any?
      bput("untie my #{@mining_implement}", 'You remove', 'You untie')
    else
      bput("get my #{@mining_implement}", 'You get', 'You are already')
    end
  end

  def store_mining_tool
    waitrt?
    if @forging_belt['items'].grep(/#{@mining_implement}/i).any?
      fput("tie my #{@mining_implement} to #{@forging_belt['name']}")
    else
      fput("stow my #{@mining_implement}")
    end
  end

  def setup
    EquipmentManager.new.empty_hands
    Flags.add('mine-danger', 'The ground rumbles ominously', 'A bitter smell seeps into the air', 'The floor shudders briefly', 'continued mining .* hazardous', 'slightly dangerous because the ground')
    # Flags.add('mine-stand', 'clear away enough rubble to lever yourself free', 'You probably would have better luck while standing', 'You peacefully awaken, feeling refreshed', 'The world slowly comes into focus again, followed swiftly by a throbbing headache')
    Flags.add('mine-exit', 'The entire wall of rock fractures at your blow and comes crashing down atop you')
    Flags.add('resource-level',
              'certain a scattering of resources', 'enormous quantity remains to be found', 'substantial quantity remains to be found',
              'good quantity remains to be found', 'decent quantity remains to be found', 'small quantity remains to be found',
              'enormous quantity \(5/5\) remains to be found', 'substantial quantity \(4/5\) remains to be found', 'good quantity \(3/5\) remains to be found',
              'decent quantity \(2/5\) remains to be found', 'small quantity \(1/5\) remains to be found', 'scattering of resources \(0/5\) remains to be found')
    settings = get_settings
    @mining_skip_populated = settings.mining_skip_populated
    @mining_implement = settings.mining_implement
    @forging_belt = settings.forging_belt
    @loot_list = settings.mining_buddy_vein_list
    @use_packet = settings.mine_use_packet
    @ignored_rock_sizes = settings.mining_ignored_stone_sizes
    @ignored_deed = settings.mining_ignored_deed_sizes
    @mining_attempt_timer = settings.mining_attempt_timer
  end
end

before_dying do
  Flags.delete('mine-danger')
  Flags.delete('mine-exit')
  Flags.delete('resource-level')
end

Mine.new
