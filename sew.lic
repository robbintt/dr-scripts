=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#sew
=end

custom_require.call(%w[common common-arcana common-crafting common-items common-money common-travel drinfomon events])

class Sew
  include DRC
  include DRCC
  include DRCI
  include DRCM
  include DRCT
  include DRCA

  def initialize
    @settings = get_settings
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.outfitting_belt
    @hometown = @settings.hometown
    @hometown_data = get_data('crafting')['tailoring'][@hometown]

    arg_definitions = [
      [
        { name: 'finish', options: %w[log stow trash], description: 'What to do with the finished item.' },
        { name: 'type', options: %w[knitting sewing leather], description: 'What tailoring type is this item.' },
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Chapter containing the item.' },
        { name: 'recipe_name', display: 'recipe name', regex: /^[A-z\s\-\']+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'noun', regex: /\w+/i, variable: true },
        { name: 'material', regex: /\w+/i, variable: true, description: 'Type of material to use.' }
      ],
      [
        { name: 'seal', regex: /seal/i }
      ],
      [
        { name: 'reinforce', regex: /reinforce/i }
      ],
      [
        { name: 'lighten', regex: /lighten/i }
      ],
      [
        { name: 'resume', regex: /resume/i },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to resume.' }
      ]
    ]

    args = parse_args(arg_definitions)

    @finish = args.finish
    @chapter = args.chapter
    @recipe_name = args.recipe_name
    @noun = args.noun
    @mat_type = args.material
    @stamp = @settings.mark_crafted_goods
    @training_spells = @settings.crafting_training_spells

    wait_for_script_to_complete('buff', ['sew'])

    Flags.add('sew-assembly', 'another finished \S+ shield (handle)', 'another finished wooden (hilt|haft)', 'another finished (long|short|small|large) leather (cord|backing)', 'another finished (small|large) cloth (padding)', 'another finished (long|short) wooden (pole)')
    Flags.add('sew-pins', 'The pins is all used up, so you toss it away.')

    if args.type == 'knitting'
      knit
    elsif args.type == 'sewing'
      sew
    elsif args.type == 'leather'
      leather
    elsif args.seal
      seal
    elsif args.reinforce
      reinforce
    elsif args.lighten
      lighten
    elsif args.resume
      resume
    else
      echo('Sew does not yet support that form of tailoring.')
    end
  end

  def get_item(name)
    get_crafting_item(name, @bag, @bag_items, @belt)
  end

  def stow_item(name)
    @bag = "other #{@bag}" unless stow_crafting_item(name, @bag, @belt)
  end

  def check_thread
    return if exists?('cotton thread')
    room = Room.current.id
    ensure_copper_on_hand(1000, @settings)
    DRCT.order_item(@hometown_data['stock-room'], 6)
    stow_item('cotton thread')
    walk_to(room)
  end

  def check_pins
    return unless Flags['sew-pins'] || !exists?('straight pins')
    ensure_copper_on_hand(125, @settings)
    item = left_hand
    stow_item(item)
    room = Room.current.id
    DRCT.order_item(@hometown_data['tool-room'], 5)
    stow_item('pin')
    walk_to(room)
    get_item(item)
    Flags.reset('sew-pins')
  end

  def study_tailoring(chapter, recipe)
    get_item('tailoring book')
    echo('*** You will need to upgrade to a journeyman or master book before 176 ranks! ***') if DRSkill.getrank('Outfitting') == 175
    case bput("turn my book to page #{find_recipe(chapter, recipe)}", 'You turn your', 'The book is already', 'Which page do you wish')
    when 'Which page do you wish'
      echo('*** Recipe not found in book, it needs to be upgraded to the next higher level ***')
      magic_cleanup
      exit
    end
    bput('study my book', 'Roundtime')
    stow_item('book')
  end

  def leather
    check_thread
    crafting_magic_routine(@settings)
    study_tailoring(@chapter, @recipe_name)
    get_item("#{@mat_type} leather")
    do_sew("cut my #{@mat_type} leather with my scissors", 'scissors')
  end

  def sew
    check_thread
    crafting_magic_routine(@settings)
    study_tailoring(@chapter, @recipe_name)
    get_item("#{@mat_type} cloth")
    do_sew("cut my #{@mat_type} cloth with my scissors", 'scissors')
  end

  def knit
    crafting_magic_routine(@settings)
    study_tailoring(@chapter, @recipe_name)
    get_item('knitting needle')
    pause 1
    fput('swap') unless right_hand =~ /needle/i
    get_item("#{@mat_type} yarn")
    do_knit("knit my #{@mat_type} yarn with my needles")
  end

  def seal
    Flags.add('sealing-done', 'shows improved signs of durability and wear resistance from the successful sealing process')
    study_tailoring(1, 'tailored armor sealing')
    do_seal(true)
  end

  def lighten
    check_thread
    study_tailoring(1, 'tailored armor lightening')
    get_item('scissors')
    @noun = GameObj.right_hand.noun
    do_sew("cut my #{@noun} with my scissors", 'scissors', true)
  end

  def reinforce
    check_thread
    study_tailoring(1, 'tailored armor reinforcing')
    get_item('scissors')
    @noun = GameObj.right_hand.noun
    do_sew("cut my #{@noun} with my scissors", 'scissors')
  end

  def assemble_part
    while Flags['sew-assembly']
      part = Flags['sew-assembly'].to_a[1..-1].join('.')
      Flags.reset('sew-assembly')
      stow_item(left_hand)
      get_item(part)
      bput("assemble my #{@noun} with my #{part}", 'affix it securely in place', 'and tighten the pommel to secure it', 'carefully mark where it will attach when you continue crafting')
      waitrt?
      get_item('sewing needles')
    end
  end

  def do_seal(wax)
    waitrt?
    return if Flags['sealing-done']
    if wax
      get_item('sealing wax')
      bput("apply my wax to my #{right_hand}", 'roundtime')
      waitrt?
      stow_item('wax')
    else
      get_item('slickstone')
      bput("scrape my #{right_hand} with my slickstone", 'roundtime')
      waitrt?
      stow_item('slickstone')
    end

    do_seal !wax
  end

  def resume_knit
    bput('analyze my knitting needles',
         /You analyze both the needles and (?:some|an?) unfinished knitted .+ (.+) on them/,
         'This appears to be a crafting tool',
         'Roundtime')
    pause 1
    results = reget(40)
    unless results.to_s =~ /You analyze both the needles and (?:some|an?) unfinished knitted .+ (.+) on them/
      echo 'Nothing found on the needles.  Exiting'
      exit
    end
    @noun = Regexp.last_match(1).to_s
    echo "Found an unfinished #{@noun} on the needles."
    do_knit('push my knitting needles') if results.to_s.include?('purl stitching')
    do_knit('knit my knitting needles') if results.to_s.include?('more knitting')
    do_knit('turn my knitting needles') if results.to_s.include?('need to be turned')
    cast_and_finish if results.to_s.include?('must be cast')
    exit
  end

  def resume
    waitrt?
    resume_knit if @noun.include?('needle') || right_hand.include?('knitting needles') || left_hand.include?('knitting needles')

    case bput("analyze my #{@noun}",
              'dimensions changed while working on it',
              'is in need of pinning to help arrange the material for further sewing',
              'pushing it with a needle and thread',
              'Deep creases and wrinkles in the fabric',
              'scissor cuts',
              'cutting with some scissors',
              'Roundtime')
    when 'dimensions changed while working on it'
      tool = 'yardstick'
      next_command = "measure my #{@noun} with my yardstick"
    when 'scissor cuts', 'cutting with some scissors'
      tool = 'scissors'
      next_command = "cut my #{@noun} with my scissors"
    when 'is in need of pinning to help arrange the material for further sewing'
      tool = 'pins'
      next_command = "poke my #{@noun} with my pins"
    when 'Deep creases and wrinkles in the fabric'
      tool = 'slickstone'
      next_command = "scrape my #{@noun} with my slickstone"
    # when 'needs holes punched', 'requires some holes punched'
    #   tool = 'awl'
    #   next_command = "poke my #{@noun} with my awl"
    when 'pushing it with a needle and thread'
      tool = 'sewing needles'
      next_command = "push my #{@noun} with my needles"
    when 'Roundtime'
      resume
      return
    else
      echo '***UNKNOWN NEXT COMMAND WHEN TRYING TO RESUME***'
      exit
    end
    do_sew(next_command, tool)
  end

  def do_sew(command, tool, lighten = false)
    waitrt?
    crafting_magic_routine(@settings)
    stow_item(left_hand) if checkleft
    if @last_command == "cut my #{@mat_type} cloth with my scissors"
      fput("stow my #{@mat_type} cloth")
      pause
      fput("stow my #{@mat_type} cloth") if checkleft
    end
    get_item(tool)
    @last_command = command
    assemble_part
    next_command = "push my #{@noun} with my needles"
    case bput(command,
              'dimensions appear to have shifted and could benefit from some remeasuring',
              'With the measuring complete, now it is time to cut away more',
              'and could use some pins to',
              'deep crease develops along', 'wrinkles from all the handling and could use',
              'The needles need to have thread put on them before they can be used for sewing',
              'needs holes punched', 'requires some holes punched',
              'You realize that cannot be repaired', 'not damaged enough to warrant repair', 'You cannot figure out how to do that',
              'appears ready to be reinforced with some large cloth padding',
              'New seams must now be sewn to properly fit the lightened material together',
              'Roundtime')
    when 'dimensions appear to have shifted and could benefit from some remeasuring'
      tool = 'yardstick'
      next_command = "measure my #{@noun} with my yardstick"
    when 'With the measuring complete, now it is time to cut away more'
      tool = 'scissors'
      next_command = "cut my #{@noun} with my scissors"
    when 'and could use some pins to'
      tool = 'pins'
      next_command = "poke my #{@noun} with my pins"
      check_pins
    when 'deep crease develops along', 'wrinkles from all the handling and could use'
      tool = 'slickstone'
      next_command = "scrape my #{@noun} with my slickstone"
    when 'The needles need to have thread put on them before they can be used for sewing'
      item = right_hand
      fput("drop #{item}")
      get_item('cotton thread')
      fput('put thread on my sewing needles')
      fput("get #{item}")
    when 'needs holes punched', 'requires some holes punched'
      tool = 'awl'
      next_command = "poke my #{@noun} with my awl"
    when 'You realize that cannot be repaired', 'not damaged enough to warrant repair', 'You cannot figure out how to do that'
      stow_item(left_hand)
      finish
    when 'New seams must now be sewn to properly fit the lightened material together'
      tool = 'sewing needles'
    when 'appears ready to be reinforced with some large cloth padding'
      stow_item(left_hand)
      get_item('large padding')
      bput("assemble my #{@noun} with my padding", 'carefully mark where it will attach when you continue crafting')
      case bput("analy my #{@noun}", 'needle and thread', 'pinning', 'slickstone', 'remeasuring', 'scissor')
      when 'needle and thread'
        tool = 'sewing needles'
      when 'pinning'
        tool = 'pins'
        next_command = "poke my #{@noun} with my pins"
      when 'slickstone'
        tool = 'slickstone'
        next_command = "scrape my #{@noun} with my slickstone"
      when 'remeasuring'
        tool = 'yardstick'
        next_command = "measure my #{@noun} with my yardstick"
      when 'scissor'
        tool = 'scissors'
        next_command = "cut my #{@noun} with my scissors"
      end
    when 'Roundtime'
      if lighten
        tool = 'scissors'
        next_command = "cut my #{@noun} with my scissors"
      else
        tool = 'sewing needles'
      end
    end
    crafting_magic_routine(@settings)
    do_sew(next_command, tool, lighten)
  end

  def magic_cleanup
    return if @training_spells.empty?

    bput('release spell', 'You let your concentration lapse', "You aren't preparing a spell")
    bput('release mana', 'You release all', "You aren't harnessing any mana")
    bput('release symb', "But you haven't", 'You release', 'Repeat this command')
  end

  def do_knit(command)
    waitrt?
    crafting_magic_routine(@settings)
    next_command = 'knit my needles'
    case bput(command,
              'Now the needles must be turned', 'Some ribbing should be added',
              'Next the needles must be pushed', 'ready to be pushed',
              'The garment is nearly complete and now must be cast off',
              'You are already knitting',
              'Roundtime',
              'That tool does not seem suitable for that task.',
              'You need a larger amount of material',
              'is not here!')
    when 'Now the needles must be turned', 'Some ribbing should be added'
      next_command = 'turn my needles'
    when 'Next the needles must be pushed', 'ready to be pushed'
      next_command = 'push my needles'
    when 'The garment is nearly complete and now must be cast off'
      cast_and_finish
    when 'You are already knitting'
      bput('pull my needles', 'Do you really want to discard')
      bput('pull my needles', 'You untie and discard')
      do_knit(command)
      next_command = ''
    when 'is not here!'
      do_knit(command.sub(' my', ''))
    when 'That tool does not seem suitable for that task.'
      case bput('analyze my needles', 'is in need of more knitting.', 'The needles need to be turned', 'Some purl stitching is', 'needles must be cast')
      when 'is in need of more knitting.'
        next_command = 'knit my needles'
      when 'The needles need to be turned'
        next_command = 'turn my needles'
      when 'Some purl stitching is'
        next_command = 'push my needles'
      when 'needles must be cast'
        cast_and_finish
      end
    when 'You need a larger amount of material'
      echo '***STATUS*** CANNOT CRAFT, NEED MORE MATERIAL'
      exit
    end
    waitrt?
    stow_item('yarn') if left_hand =~ /yarn/i
    crafting_magic_routine(@settings)
    do_knit(next_command)
  end

  def cast_and_finish
    bput('cast my needles', 'roundtime')
    pause 1
    waitrt?
    stow_item('knitting needle')
    finish
  end

  def finish
    if @stamp
      get_item('stamp')
      fput("mark my #{@noun} with my stamp")
      pause
      waitrt?
      stow_item('stamp')
    end
    case @finish
    when /log/
      logbook_item('outfitting', @noun, @bag)
    when /stow/
      stow_item(@noun)
    when /trash/
      dispose_trash(@noun)
    end
    magic_cleanup
    exit
  end
end

before_dying do
  Flags.delete('sew-assembly')
  Flags.delete('sew-pins')
  Flags.delete('sealing-done')
end

Sew.new
