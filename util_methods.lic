custom_require.call(%w[drinfomon common])

#include DRC

module UtilMethods

  def turn_tarantula(skill)
    # TODO: expand logic
    
    # fix this one for now
    if skill == "Lunar Magic"
      skill = "magic"
    end
    pause
    waitrt?
    put "turn my tarantula to #{skill}"
  end

  def rub_tarantula
    # TODO: expand logic
    pause
    waitrt?
    put "rub my tarantula"
    pause
    waitrt?
    put "exp 0" # reset lich utility tracking for the skill that was drained
  end

  def use_tarantula_if_full(skillname)
    if DRSkill.getxp(skillname) >= 34
      turn_tarantula(skillname)
      rub_tarantula
      return 1
    end
    return 0
  end

  def collect_rock
    # for tarantula... i guess the point is to train perception not outdoorsmanship? currently getting perc in hunting again...
    #use_tarantula_if_full("Outdoorsmanship")
    pause
    waitrt?
    fput "kick pile", "You take a step back and run up to the pile of rocks.", "I could not find what you were referring to.", "Assuming you mean"
    fput "kick pile", "You take a step back and run up to the pile of rocks.", "I could not find what you were referring to.", "Assuming you mean"
    pause
    fput "collect rock", "Your concentration slips", "You feel fully prepared", "You manage", "You move", "You manage to collect a pile of rocks.", "You wander around and poke your fingers", "Mindlessly you begin to forage the area before you.", "With skill and nimble fingers you avoid the centipede that runs along in front of your fingers.", "You begin scanning the area before you, trying to find just the right spot to forage.", "You move slightly to the right, hoping to find a better foraging spot.", "Hawkishly"
  end

  def buy(item, cost)
    # typically offer a higher cost so you don't have to deal with barter
    # this can be fixed later to read and say the price the merchant offers
    # item -> string, cost -> string
    waitrt?
    pause
    put("order #{item}")
    waitrt?
    pause
    put("offer #{cost}")
    waitrt?
    pause
    put("offer #{cost}")
  end

  def buy_fast(item)
    # for merchants with no negotiation step
    waitrt?
    pause
    put("buy #{item}")
  end

  def stowheld
    @@held_text = ""
    while @@held_text != "Both of your hands are empty."
      pause
      waitrt?
      fput "stow right", "you", "Stow what?"
      pause
      waitrt?
      fput "stow left", "you", "Stow what?"
      pause
      waitrt?
      @@held_text = fput "inv held", "Both of your hands are empty.", "You", "you"
    end
  end

  def stowfeet
    fput "stow feet", "you", "Stow what?"
  end

  def getmyitem(item)
    pause
    waitrt?
    fput "get my #{item}", "You", "What were you referring to?"
  end

  def getitem(item, container="")
    if container == ""
      pause
      waitrt?
      fput "get #{item}", "You", "What were you referring to?"
    else
      pause
      waitrt?
      fput "get #{item} from #{container}", "You", "What were you referring to?"
    end
  end

  def stowmyitem(item)
    pause
    waitrt?
    fput "stow my #{item}", "You", "Stow what?"
  end

  def stowitem(item)
    pause
    waitrt?
    fput "stow my #{item}", "You", "Stow what?"
  end

  def unpause_other_scripts
    #resume the previously paused scripts
    Script.running.find_all { |s| s.paused? && !s.no_pause_all && $scripts_to_unpause.include?(s.name) }.each(&:unpause)
  end

  def pause_other_scripts
    #Pause all running scripts, that do not have no_pause_all flag set
    #Do not use pause_all/unpause_all, as when resuming this could resume scripts that were not paused by this script
    $scripts_to_unpause = []
    Script.running.find_all { |s| !s.paused? && !s.no_pause_all && s.name != Script.self.name}.each do  |s|
      s.pause
      $scripts_to_unpause << s.name
    end
  end


  def justicearea?
    pause
    waitrt?
    justicearea = fput "justice", "You're fairly certain this area is lawless and unsafe.", "After assessing the area, you think local law enforcement keeps an eye on what's going on here.", "You", "you"
    # This is defensive to avoid the law
    if justicearea != "You're fairly certain this area is lawless and unsafe."
      return true
    else
      return false
    end
  end

end
