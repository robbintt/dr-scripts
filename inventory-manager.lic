=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#inventory-manager
=end

custom_require.call(%w[common drinfomon])

class InventoryManager
  include DRC
  
  def initialize
    @active_character = Char.name.to_sym
    @item_db_path = "data/inventory.yaml"

    arg_definitions = [
			[
        { name: 'save', regex: /save/i, description: "Save new or update current character's items to the database." },
        { name: 'vault_book', regex: /vault/i, optional: true, description: "Retrieves, reads, and save from vault book." },
        { name: 'eddy', regex: /eddy/i, optional: true, description: "Save the contents of an eddy (HE 436 Gift)." }
			],
      [
        { name: 'search', regex: /search/i, description: 'Start a search across all characters for specified item.' },
				{ name: 'item', regex: /\w+/i, optional: false, description: 'Item to find.' }
			],
			[
				{ name: 'list', regex: /list/i, description: "Print out a list of names in the database." },
        { name: 'name', regex: /\w+/i, optional: true, description: "List full inventory for specified character. (Can spam!)" }
			],
			[
				{ name: 'remove', regex: /remove/i, description: "Remove character's inventory." },
				{ name: 'name', regex: /\w+/i, optional: false, description: 'Character to remove.' }
      ]
    ]

    args = parse_args(arg_definitions)

    setup 

    if args.vault_book
      add_vault_book_inv
    elsif args.eddy
      add_eddy_inv
    elsif args.save
		  add_current_inv
	  elsif args.remove
      remove_character_data(args.name)
	  elsif args.search
      search_for_item(args.item)
    elsif args.list
      list_character_inv(args.name)
    else
			message 'Type ;inventory-manager help for a usage guide'
    end
  end

  def setup
    @item_data = {}

    if !File.exists?(@item_db_path)
      File.open(@item_db_path, "w") {}
      @item_data = OpenStruct.new(YAML.load_file(@item_db_path)).to_h
    end

    if !File.exists?(@item_db_path)
      message "Something very wrong is occuring. You don't have a file to open and I can't create one!"
      message "item-db saves the file to: /lich/scripts/itemDB/inventory.yaml"
      exit
    end
  
    @item_data = OpenStruct.new(YAML.load_file(@item_db_path)).to_h
  end

  def add_vault_book_inv
    if @item_data[@active_character]
      @item_data[@active_character] = @item_data[@active_character].select { |line| !line.include?'vault' }
    else
      @item_data[@active_character] = []
    end

    case bput('get my vault book', 'You get', 'What were')
    when 'What were'
      message "Unable to find your vault book, exiting!"
      exit
    end

    bput('read my vault book', 'Vault Inventory:')
    while line = get
      break if line =~ /The last note/i

      item = line.lstrip.concat(' (vault)')
      @item_data[@active_character] << item
    end

    bput('stow my vault book', 'You put')

    message "Saving vault data for #{@active_character}!"
    File.open(@item_db_path, 'w') { |file| file.write(@item_data.to_yaml) }
  end

  def add_current_inv
    if @item_data[@active_character]
      @item_data[@active_character] = @item_data[@active_character].select { |line| (line.include?('vault') || line.include?('eddy')) }
    else
      @item_data[@active_character] = []
    end

    bput('inv list', 'You have:')
    while line = get
      break if line =~ /Roundtime/i

      item = line.lstrip
      if item[0].eql? '-'
        item[0] = ''
        item.concat(' (in container)')
      else 
        item.concat(' (worn)')
      end
      @item_data[@active_character] << item
    end

    message "Saving inventory data for #{@active_character}!"
    File.open(@item_db_path, 'w') { |file| file.write(@item_data.to_yaml) }
  end

  def add_eddy_inv
    if @item_data[@active_character]
      @item_data[@active_character] = @item_data[@active_character].select { |line| !line.include?'eddy' }
    else
      @item_data[@active_character] = []
    end

    using_sorter = false
    if Script.running?('sorter')
      stop_script('sorter')
      using_sorter = true
    end

    result = bput('look in my watery portal', /In the swirling eddy .*/i, 'What were')
    tempString = result.slice!("In the swirling eddy you see")
    itemList = result.split(",")
    itemList.each_with_index do |item, itr|
      if itr < itemList.length-1
        @item_data[@active_character] << item.lstrip.concat(' (eddy)')
      else
        item = item.split("and")
                   .each do |item2| 
                     @item_data[@active_character] << item2.strip.concat(" (eddy)").tr('.', '')
                   end
      end
    end

    message "Saving eddy data for #{@active_character}!"
    File.open(@item_db_path, 'w') { |file| file.write(@item_data.to_yaml) }
    if using_sorter
      start_script('sorter') unless Script.running?('sorter')
    end
  end

  def list_character_inv(name)
    if name.nil?
      message "There is inventory data for:"
      @item_data.each { |k, v| message "    #{k.to_s}" }
      return
    end

    nameSym = name.capitalize.to_sym
    if @item_data.has_key?(nameSym)
      message "Inventory for #{name.capitalize}"
      @item_data[nameSym].each { |item| message "   - #{item}" }
    else
      message "No data found for the character #{name.capitalize}!"
    end
  end

  def search_for_item(item)
    total_found = 0
    @item_data.each do |k, v|
      total_found = 0
      message "Checking #{k.to_s}:"
      v.each { |data|
        if data.include?(item)
          total_found += 1
          message "Match #{total_found}): #{data}"
        end
      }
      message "Found #{total_found} matches on #{k.to_s}\n"
    end
  end

  def remove_character_data(name)
    @item_data.delete(name.capitalize.to_sym)
    File.open(@item_db_path, 'w') { |file| file.write(@item_data.to_yaml) }
    message "Removed #{name.capitalize}'s data!"
  end
end

InventoryManager.new