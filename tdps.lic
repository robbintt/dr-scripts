
races = { 'human' => [0, 0, 0, 0, 0, 0, 0, 0],
          'dwarf' => [0, 1, 1, 0, -1, 0, 0, -1],
          'elf' => [1, -1, -1, -1, 1, 0, 0, 1],
          'halfling' => [2, -1, -2, 0, 1, 1, 0, -1],
          'gnome' => [3, -2, -1, 0, 0, 0, -2, 2],
          'gortog' => [-3, 1, 0, 0, 0, 2, 2, -2],
          'elothean' => [1, -1, 0, 0, 0, -1, -1, 2],
          'skramur' => [-1, -1, 0, 0, 0, 1, 1, 0],
          'kaldar' => [-1, 0, 0, -1, 0, 1, 1, 0],
          'prydaen' => [0, -2, 0, -1, 1, 2, 0, 0],
          'rakash' => [0, -1, 1, 0, -1, 1, 2, -2] }

def cost(current, modifier)
  cost = 0
  start = 10 - 2*modifier
  for i in start..current-1 do
    mult = i < 100 ? 3 : 15
    mod = ( modifier.to_f * i / 2 ).truncate
    cost += (i * mult) + mod
  end
  return cost
end

circle = nil
exp = []
skills = []
costs = []

#Get current stats, race, and pick the correct modifier array for your race
stats = [DRStats.strength, DRStats.reflex, DRStats.agility, DRStats.charisma, DRStats.discipline, DRStats.wisdom, DRStats.intelligence, DRStats.stamina]
race = DRStats.race.downcase.sub(' ', '').sub("'", '')
mods = races.fetch(race)

put 'exp all'
waitfor('EXP HELP for more information')

# Capture and extract data
data = reget(39)
data.each { |line| exp << line if (/\(.?.\/34\)/ =~ line) }
exp.each { |line| skills << [line.slice(0,16), line.slice(17,7).strip.to_i, line.slice(25,2).to_i]; skills << [line.slice(50,16), line.slice(67,7).strip.to_i, line.slice(75,2).to_i] }
skills.delete(["\r", 0, 0])
ranks = skills.transpose[1]

# Calculate total ranks and total TDPs from that
total_ranks = ranks.inject(0){ |sum,x| sum + x }
ranks.map!{ |r| (r*(r+1))/2 }
rank_tdps = ranks.inject(0){|sum,x| sum + x } / 200

# Calculate TDPs from circling
circle = DRStats.circle
case circle
when 0
  circle_tdps = 600
when 1..9
  circle_tdps = ( (circle*(circle+1)/2) + (50*(circle - 1) - 1) ) + 600
when 10..150
  circle_tdps = ( (circle*(circle+1)/2) + (100*(circle - 11) + 599) ) + 600
when 151..200
  circle_tdps = ( (150*(150+1)/2) + (100*(150-11)+599) ) + 600
else
  echo "Unable to determine circle."
end

#Calcuate total TDPs spent for each stat
for i in 0..7
  costs[i] = cost( stats[i], mods[i] )
end

# Display info
_respond "<pushBold/>Total Ranks Gained: #{total_ranks}<popBold/>"
_respond "<pushBold/>TDPs Gained from Ranks: #{rank_tdps}<popBold/>"
_respond "<pushBold/>TDPs Gained from Circling: #{circle_tdps}<popBold/>"
_respond "<pushBold/>Total TDPs Gained: #{rank_tdps + circle_tdps}<popBold/>"
_respond "<pushBold/>Total TDPs spent: #{costs.inject(0, :+)}<popBold/>"
_respond "<pushBold/>TDPs remaining: #{rank_tdps + circle_tdps - costs.inject(0, :+)}<popBold/>"
_respond "\n"
_respond "<pushBold/>TDPs spent per stat<popBold/>"
_respond "<pushBold/>" + "Strength : ".rjust(16) + "#{costs[0]}" + "Reflex : ".rjust(26-costs[0].to_s.length) + "#{costs[1]}<popBold/>"
_respond "<pushBold/>" + "Agility : ".rjust(16) + "#{costs[2]}" + "Charisma : ".rjust(26-costs[2].to_s.length) + "#{costs[3]}<popBold/>"
_respond "<pushBold/>" + "Discipline : ".rjust(16) + "#{costs[4]}" + "Wisdom : ".rjust(26-costs[4].to_s.length) + "#{costs[5]}<popBold/>"
_respond "<pushBold/>" + "Intelligence : ".rjust(16) + "#{costs[6]}" + "Stamina : ".rjust(26-costs[6].to_s.length) + "#{costs[7]}<popBold/>"
