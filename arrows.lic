=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#arrows
=end

custom_require.call(%w[common common-items common-crafting common-money common-travel])

class Arrows
  include DRC
  include DRCC
  include DRCI
  include DRCM
  include DRCT

  def initialize
    @settings = get_settings
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.engineering_belt
    @hometown = @settings.hometown
    @engineering_room = @settings.engineering_room
    @hometown_data = get_data('crafting')['shaping'][@hometown]

    arg_definitions = [
      [
        { name: 'type',
          options: %w[cougar-claw boar-tusk sabretooth angiswaerd hele'la basilisk elsralael soot-stained ice-adder jagged-horn drake-fang],
          variable: true,
          descriptions: "Which arrow type to create?" },

        { name: 'lumber',
          regex: /\w+/i,
          variable: true,
          description: 'Type of lumber used.' },

        { name: 'tools',
          regex: /tools/,
          optional: true,
          description: 'Get tools from clerk?'}
      ],
      [
        { name: 'continue', regex: /continue/i, variable: true }
      ]
    ]

    args = parse_args(arg_definitions)

    if args.continue
      wait_for_script_to_complete('shape', ['continue', 'arrows'])
      exit_tasks
      exit
    end

    @type = args.type
    @lumber = args.lumber
    @tools = args.tools

    ensure_copper_on_hand(2000, @settings)
    get_tools if @tools
    order_lumber
    check_flights
    check_glue
    DRCT.walk_to(@engineering_room)
    make_shafts
    make_arrowheads
    wait_for_script_to_complete('shape', ['stow', '5', "#{@type} arrows", 'shafts', 'arrows'])
    exit_tasks
  end

  def exit_tasks
    clean_up
    store_tools if @tools
    exit
  end

  def get_tools
    wait_for_script_to_complete('clerk-tools', ['engineering', 'get']) unless DRCI.exists?('shaper')
  end

  def store_tools
    wait_for_script_to_complete('clerk-tools', ['engineering', 'store']) if DRCI.exists?('shaper')
  end

  def order_lumber
    return if exists?("#{@lumber} lumber") || exists?('arrow shafts')
    wood = find_piece("#{@lumber} lumber")
    DRCT.order_item(@hometown_data['stock-room'], wood)
    bput("combine my lumber", "You combine", "You must") if DRCI.get_item("#{@lumber} lumber", @bag)
    stow_craft('lumber')
  end

  def check_flights
    return if exists?('arrow flights')
    flight = find_piece('arrow flights')
    DRCT.order_item(@hometown_data['stock-room'], flight)
    stow_craft('arrow flights')
  end

  def check_glue
    if search?('glue')
      bput('get my glue', 'You get')
      /(\d+)/ =~ bput('count my glue', 'The wood glue has *\d+ uses remaining')
      if Regexp.last_match(1).to_i < 5
        stow_craft('glue')
        DRCT.dispose('glue')
        DRCT.order_item(@hometown_data['tool-room'], @hometown_data['glue-number'])
      end
    else
      DRCT.order_item(@hometown_data['tool-room'], @hometown_data['glue-number'])
    end
    stow_craft('glue')
  end

  def make_shafts
    return if exists?('arrow shafts')
    get_craft('shaper')
    if DRCI.get_item("#{@lumber} lumber", @bag)
      bput("shape lumber into arrow shaft", 'Roundtime')
      stow_craft('shaper')
      stow_craft('shafts')
    else
      DRC.message(" *** Out of #{@lumber} lumber and shafts *** ")
      beep
      exit
    end
  end

  def make_arrowheads
    return if exists?("#{@type} arrowheads")
    arrow_head = { "cougar-claw" => "curved claw", "boar-tusk" => "boar tusk", "sabretooth" => "ivory fang", "angiswaerd" => "angiswaerd tooth", "hele'la" => "needlesharp tooth", "basilisk" => "basilisk fang", "elsralael" => "elsralael tooth", "soot-stained" => "soot-streaked fang", "ice-adder" => "adder fang", "jagged-horn" => "jagged horn", "drake-fang" => "drake fang" }
    new_type = arrow_head[@type]
    if DRCI.get_item(new_type, @bag)
      get_craft('shaper')
      DRC.bput("shape #{new_type} into arrowhead", 'Roundtime', 'You fumble')
      stow_craft('shaper')
      stow_craft("#{@type} arrowheads")
    else
      beep
      DRC.message("***Out of #{@type}!***")
      exit_tasks
    end
  end

  def clean_up
    DRC.bput("get my arrow shafts", "You get", "You pick up", "What were")
    stow_craft('arrow shafts')
    stow_craft('lumber') if DRCI.exists?('lumber')
  end

  def find_piece(match_string)
    wait_for_script_to_complete('go2', [@hometown_data['stock-room']])
    echo(match_string)
    piece = DRC.bput('order', "^\\d+\\)\\.\\s\\s(?:some|a|an|stack of|5 pieces of|10 pieces of|1 batch of straight)?\\s*#{match_string}")
    piece =~ /^(\d+)/
    echo(piece)
    Regexp.last_match(1)
  end

  def get_craft(name)
    get_crafting_item(name, @bag, @bag_items, @belt)
  end

  def stow_craft(name)
    stow_crafting_item(name, @bag, @belt)
  end
end
Arrows.new
