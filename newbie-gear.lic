=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#newbie-gear
=end

custom_require.call(%w[common common-crafting common-items common-money common-travel])

class NewbieGear
  include DRC
  include DRCC
  include DRCI
  include DRCM
  include DRCT

  def initialize
    arg_definitions = [
      [
        { name: 'storage', regex: /\w+/i, description: 'The container in which to store finished items' }
      ]
    ]

    args = parse_args(arg_definitions)

    ensure_copper_on_hand(40_000, get_settings)

    item_list = [
      # noun, volumes, chapter, recipe name, number of small padding, number of large padding, material
      ['shirt', 34, 4, 'quilted cloth shirt', 0, 2, 'heavy burlap'],
      ['pants', 10, 4, 'quilted cloth pants', 1, 1, 'heavy burlap'],
      ['mask', 2, 4, 'quilted cloth mask', 1, 1, 'heavy burlap'],
      ['hood', 9, 4, 'quilted cloth hood', 1, 1, 'heavy burlap'],
      ['gloves', 4, 4, 'quilted cloth gloves', 1, 1, 'heavy burlap'],
      # noun, volumes, chapter, recipe name, material
      ['backpack', 5, 3, 'backpack', 'heavy linen'],
      ['bag', 6, 3, 'duffel bag', 'heavy linen'],
      # noun, volumes, recipe name, material
      ['sword', 9, 'bastard sword', 'steel'],
      ['spear', 7, 'light metal spear', 'steel'],
      ['mace', 12, 'bar mace', 'steel'],
      ['spike', 4, 'throwing spike', 'steel'],
      ['nightstick', 7, 'nightstick', 'steel'],
      ['sallet', 35, 'metal sallet', 'steel'],
      ['gauntlets', 13, 'light plate gauntlets', 'steel'],
      ['balaclava', 26, 'scale balaclava', 'steel'],
      ['gloves', 8, 'scale gloves', 'steel'],
      ['balaclava', 16, 'ring balaclava', 'steel'],
      ['gloves', 6, 'ring gloves', 'steel'],
      ['shield', 14, 'metal target shield', 'steel']
    ]

    craft(args.storage, item_list)
  end

  def craft(storage, item_list)
    restock_steel(storage, item_list.select { |x| x.last == 'steel' })
    restock_burlap(storage, item_list.select { |x| x.last == 'heavy burlap' })
    restock_linen(storage, item_list.select { |x| x.last == 'heavy linen' })
  end

  def restock_steel(storage, missing_items)
    return if missing_items.empty?
    echo missing_items
    volume = ((missing_items.map { |x| x[1] }.inject(&:+) * 1.25) / 10.0).ceil
    wait_for_script_to_complete('makesteel', [volume, 'refine'])

    missing_items.each do |item|
      wait_for_script_to_complete('smith', ['steel', item[2]]) # TODO: 'stamp', 'temper'
      fput("put my #{item.first} in my #{storage}")
    end

    wait_for_script_to_complete('workorders', %w[weaponsmithing repair])
    walk_to(8774)
    fput('get my steel ingot')
    fput('put ingot in bucket')
  end

  def restock_burlap(storage, missing_items)
    return if missing_items.empty?
    echo missing_items

    volume = missing_items.map { |x| x[1] }.inject(&:+)

    have = 0
    if bput('get burlap cloth', 'You get', 'What were') == 'You get'
      res = bput('count my cloth', 'You count out .*')
      have = res.scan(/\d+/).first.to_i
      stow_hands
    end

    if have < volume
      multiples = ((volume - have) / 16.0).ceil
      multiples.times do
        wait_for_script_to_complete('spin', ['burlap'])
        wait_for_script_to_complete('spin', ['burlap'])
        wait_for_script_to_complete('weave-cloth')
      end
    end

    while bput('get burlap cloth from back', 'You get', 'What were') == 'You get'
      fput('combine cloth')
    end
    stow_hands

    missing_items.each do |item|
      move('out') if Room.current.id == @inner_id

      item[4].times do
        DRCT.order_item(16_667, 11)
        fput('stow padding')
      end
      item[5].times do
        DRCT.order_item(16_667, 12)
        fput('stow padding')
      end

      wait_for_script_to_complete('sew', ['stow', 'sewing', item[2], item[3], item[0], 'burlap'])

      fput("get #{item[0]} from back")
      # fput('get my stamp')
      # fput("mark my #{item[0]} with my stamp")
      # waitrt?
      # pause
      # fput('stow stamp')
      # wait_for_script_to_complete('sew', ['reinforce'])
      # fput("stow #{item[0]}")
      # fput("get #{item[0]} from back")
      fput("put my #{item.first} in my #{storage}")
    end
    wait_for_script_to_complete('workorders', %w[tailoring repair])
  end

  def restock_linen(storage, missing_items)
    return if missing_items.empty?
    echo missing_items

    volume = missing_items.map { |x| x[1] }.inject(&:+)

    have = 0
    if bput('get linen cloth', 'You get', 'What were') == 'You get'
      res = bput('count my cloth', 'You count out .*')
      have = res.scan(/\d+/).first.to_i
      stow_hands
    end

    if have < volume
      multiples = ((volume - have) / 16.0).ceil
      multiples.times do
        wait_for_script_to_complete('spin', ['linen'])
        wait_for_script_to_complete('spin', ['linen'])
        wait_for_script_to_complete('weave-cloth')
      end
    end

    while bput('get linen cloth from back', 'You get', 'What were') == 'You get'
      fput('combine cloth')
    end
    stow_hands

    missing_items.each do |item|
      wait_for_script_to_complete('sew', ['stow', 'sewing', item[2], item[3], item[0], 'linen'])
      fput("get #{item[0]} from back")
      # fput('get my stamp')
      # fput("mark my #{item[0]} with my stamp")
      # waitrt?
      # pause
      # fput('stow stamp')
      fput("put my #{item.first} in my #{storage}")
    end
  end
end

NewbieGear.new
