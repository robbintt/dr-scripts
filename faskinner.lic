=begin
Elanthipedia: https://elanthipedia.play.net/Lich_script_repository#faskinner

# trainer noun should match exactly
fa_skinning_trainer: crocodile

# Options:  First Aid, Skinning, Both or leave blank for whichever happens first
fa_skinning_priority: Skinning
=end
custom_require.call(%w[common events drinfomon equipmanager])

class FaSkinner
  include DRC

  def initialize
    @settings = get_settings
    @priority = @settings.fa_skinning_priority
    @trainer = @settings.fa_skinning_trainer
    @trainer_container = @settings.fa_skinning_trainer_container
    @knife = @settings.fa_skinning_knife
    @knife_container = @settings.fa_skinning_knife_container

    EquipmentManager.new.empty_hands

    get_item(@trainer, @trainer_container) if @trainer
    get_item(@knife, @knife_container) if @knife

    if @priority == 'First Aid' && DRSkill.getxp('First Aid') < 34
      until DRSkill.getxp('First Aid') > 32
        train_skills
      end
      echo ("Exiting because First Aid locked!")
    elsif @priority == 'Skinning' && DRSkill.getxp('Skinning') < 34
      until DRSkill.getxp('Skinning') > 32
        train_skills
      end
      echo ("Exiting because Skinning locked!")
    elsif @priority == 'Both' || @priority == 'both'
      until DRSkill.getxp('First Aid') > 32  && DRSkill.getxp('Skinning') > 32
        train_skills
      end
      echo ("Exiting because First Aid AND Skinning locked!")
    else
      until DRSkill.getxp('First Aid') > 32  || DRSkill.getxp('Skinning') > 32
        train_skills
      end
      echo ("Exiting because First Aid OR Skinning locked!")
    end

    do_exit

  end

  def do_exit
    DRCI.put_away_item?(@trainer, @trainer_container) if @trainer
    DRCI.put_away_item?(@knife, @knife_container) if @knife
    exit
  end

  def train_skills
    case bput("skin my #{@trainer}",'You skillfully','A small blue-belly crocodile with prominently','You must be holding','The leather looks frayed','A small fuzzy caracal with tufted ears','need to have a bladed instrument')
    when /You must be holding/
      get_item(@trainer, @trainer_container)
    when /The leather looks frayed/
      DRC.message("No Charges!  Try again later.")
      do_exit
    when /need to have a bladed instrument/
      DRC.message("You need to either wear a skinning knife or hold a bladed weapon")
      do_exit
    end

    case bput("repair my #{@trainer}",'With some needle and thread','A small blue-belly crocodile with prominently','You must be holding','The leather looks frayed','A small fuzzy caracal with tufted ears')
    when /You must be holding/
      get_item(@trainer, @trainer_container)
    when /The leather looks frayed/
      DRC.message("No Charges!  Try again later.")
      do_exit
    end
  end

  def get_item(item, container = nil)
    unless DRCI.get_item_if_not_held?(item, container)
      DRC.message("Could not get '#{item}'!")
      do_exit
    end
  end

end

before_dying do
  EquipmentManager.new.empty_hands
end

FaSkinner.new
