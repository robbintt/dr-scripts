# quiet
=begin
  Documentation: https://elanthipedia.play.net/Lich_script_development#common-items
=end

$TRASH_STORAGE = %w[basket bin gloop barrel bucket urn log arms stump tree statue chamberpot]

$PUT_AWAY_ITEM_SUCCESS_PATTERNS = [/^You put your .* in/,
                                   /^You hold out/]
$PUT_AWAY_ITEM_OPEN_PATTERNS = [/^But that's closed/]
$PUT_AWAY_ITEM_FAILURE_PATTERNS = [/^What were you referring to/,
                                   /to fit in the/,
                                  /^There isn't any more room in/]

$OPEN_CONTAINER_SUCCESS_PATTERNS = [/^You open/,
                                    /^That is already open/]
$OPEN_CONTAINER_FAILURE_PATTERNS = [/^What were you referring to/]


$CLOSE_CONTAINER_SUCCESS_PATTERNS = [/^You close/,
                                     /^That is already closed/]
$CLOSE_CONTAINER_FAILURE_PATTERNS = [/^What were you referring to/]

custom_require.call(%w[common common-travel])

module DRCI
  module_function

  def buy_item(room, item)
    DRCT.walk_to(room)

    # Amount to pay should be first capturing group.
    patterns = [/prepared to offer it to you for (.*) (?:kronar|lirum|dokora)s?/,
                /Let me but ask the humble sum of (.*) coins/,
                /for a (?:mere )?(.*) (?:kronar|lirum|dokora)s?/,
                /I can let that go for...(.*) (?:kronar|lirum|dokora)s?/,
                /cost you (?:just )?(.*) (?:kronar|lirum|dokora)s?/,
                /it may be yours for just (.*) (?:kronar|lirum|dokora)s?/,
                /I'll give that to you for (.*) (?:kronar|lirum|dokora)s?/,
                /I ask that you give (.*) copper (?:kronar|lirum|dokora)s?/,
                /it'll be (.*) (?:kronar|lirum|dokora)s?/,
                /the price of (.*) coins? is all I ask/,
                /tis only (.*) (?:kronar|lirum|dokora)s?/,
                /That will be (.*) copper (?:kronar|lirum|dokora)s? please/,
                /to you for (.*) (?:kronar|lirum|dokora)s?/,
                /I ask (.*) copper (?:kronar|lirum|dokora)s or if you would prefer/,
                /Cost you just (.*) (?:kronar|lirum|dokora)s?, okie dokie\?/i,
                /It will cost just (.*) (?:kronar|lirum|dokora)s?/i,
                /I would suggest (.*) (?:kronar|lirum|dokora)s?/i,
                /to you for (.*) (?:kronar|lirum|dokora)s?/i,
                /asking (.*) (?:kronar|lirum|dokora)s?/i,
                'You decide to purchase',
                'Buy what']

    match = DRC.bput("buy #{item}", *patterns)
    if match
      patterns.each { |p| break if p.match(match) }
    end
    amount = Regexp.last_match(1)

    fput("offer #{amount}") if amount
  end

  def order_item(room, item_number)
    DRCT.walk_to(room)

    return if DRC.bput("order #{item_number}", 'Just order it again', 'you don\'t have enough coins') == 'you don\'t have enough coins'
    DRC.bput("order #{item_number}", 'takes some coins from you')
  end

  def dispose(item, trash_room = nil)
    DRCT.walk_to(trash_room) unless trash_room.nil?
    case DRC.bput("get my #{item}", 'You get', 'What were you', 'You pick up', 'You are already holding that')
    when 'You get', 'You pick up', 'You are already holding that'
      dispose_trash(item)
    end
  end

  def dispose_trash(item)
    return if item.nil?
    trashcans = DRRoom.room_objs
                      .reject { |obj| obj =~ /azure \w+ tree/ }
                      .map { |long_name| DRC.get_noun(long_name) }
                      .select { |obj| $TRASH_STORAGE.include?(obj) }

    trashcans.each do |trashcan|
      if trashcan == 'gloop'
        trashcan = 'bucket' if DRRoom.room_objs.include? 'bucket of viscous gloop'
        trashcan = 'cauldron' if DRRoom.room_objs.include? 'small bubbling cauldron of viscous gloop'
      elsif trashcan == 'bucket'
        trashcan = 'sturdy bucket' if DRRoom.room_objs.include? 'sturdy bucket'
      elsif trashcan == 'basket'
        trashcan = 'waste basket' if DRRoom.room_objs.include? 'waste basket'
      elsif trashcan == 'bin'
        trashcan = 'waste bin' if DRRoom.room_objs.include? 'waste bin'
      elsif trashcan == 'arms'
        trashcan = 'statue'
      elsif trashcan == 'tree'
        trashcan = 'hollow' if DRRoom.room_objs.include?('dead tree with a darkened hollow near its base')
      elsif XMLData.room_title == '[[A Junk Yard]]'
        trashcan = 'bin'
      end

      if /^You (drop|put)/ =~ DRC.bput("put my #{item} in #{trashcan}", '^You drop', '^You put', "You're kidding, right", 'What were you referring to', "You can't do that")
        return
      end
    end
    DRC.bput("drop my #{item}", 'You drop', 'What were you', 'You spread .* on the ground.')
  end

  def search?(item)
    /Your .* is in/ =~ DRC.bput("inv search #{item}", 'You can\'t seem to find anything that looks like that', 'Your .* is in')
  end

  def wearing?(description)
    result = DRC.bput("tap my #{description}", 'You tap .*', 'I could not find', 'on the shoulder')
    result =~ /wearing/
  end

  def inside?(description, container)
    result = DRC.bput("tap my #{description} in my #{container}", 'You tap .*', 'atop your', 'I could not find', 'on the shoulder')
    result =~ /inside/
  end

  def in_hands?(item)
    in_hand?(item, 'either')
  end

  def in_left_hand?(item)
    in_hand?(item, 'left')
  end

  def in_right_hand?(item)
    in_hand?(item, 'right')
  end

  # Checks if the item is in one or more hands.
  # Hand options are: left, right, either, both.
  def in_hand?(item, which_hand = 'either')
    return false unless item
    if item.is_a?(String)
      if item.split.size > 1
        item = DRC::Item.new(adjective: item.split.first, name: item.split.last)
      else
        item = DRC::Item.new(name: item)
      end
    end
    case which_hand.downcase
    when 'left'
      DRC.left_hand =~ item.short_regex
    when 'right'
      DRC.right_hand =~ item.short_regex
    when 'either'
      in_left_hand?(item) || in_right_hand?(item)
    when 'both'
      in_left_hand?(item) && in_right_hand?(item)
    else
      DRC.message("Unknown hand: #{which_hand}. Valid options are: left, right, either, both")
      false
    end
  end

  # Returns a list of item descriptions from the `INVENTORY <type|slot>` verb output.
  # Where <type> can be armor, weapon, fluff, container, or combat.
  # Where <slot> can be any phrase from INV SLOTS LIST command.
  def get_inventory_by_type(type = 'combat', line_count = 40)
    case DRC.bput("inventory #{type}", "Use INVENTORY HELP for more options.", "The INVENTORY command is the best way")
    when "The INVENTORY command is the best way"
      DRC.message("Unrecognized inventory type: #{type}. Valid options are ARMOR, WEAPON, FLUFF, CONTAINER, COMBAT, or any slot from INVENTORY SLOTS LIST.")
      return []
    end
    # Multiple lines may have been printed to the game window,
    # grab the last several lines for analysis.
    snapshot = reget(line_count)
    # Unless you're looking for items at your feet, this is noise.
    items_at_feet = snapshot.grep(/(^Lying at your feet)/).any?
    # If the snapshot found all the inventory then begin processing.
    if snapshot.grep(/^All of your (#{type}|items)|^You aren't wearing anything like that|Both of your hands are empty/).any? && snapshot.grep(/Use INVENTORY HELP/).any?
      snapshot
      .map(&:strip)
      .reverse
      .take_while { |line| [/^All of your (#{type}|items)/, /^You aren't wearing anything like that/, /Both of your hands are empty/].none? { |phrase| phrase =~ line } }
      .drop_while { |line| !line.start_with?('[Use INVENTORY HELP for more options.]') }
      .drop(1)
      .reverse
      .take_while { |line| !items_at_feet || !line.start_with?('Lying at your feet') }
      .map { |item| item.gsub(/^(a|an|some)\s+/, '').gsub(/\s+\(closed\)/, '') }
    else
      # Otherwise, retry the command. Other actions may have flooded the game window.
      get_inventory_by_type(type, line_count + 40)
    end
  end

  def exists?(description)
    result = DRC.bput("tap my #{description}", 'You tap .*', 'I could not find', 'on the shoulder', '^You thump your fingers', 'The orb is delicate')
    result =~ /You tap|You thump|The orb is delicate/
  end

  def count_item_parts(item)
    match_messages = [
      /and see there (?:is|are) (.+) left\./,
      /There (?:is|are) (?:only )?(.+) parts? left/,
      /There's (?:only )?(.+) parts? left/,
      /There are enough left to create (.+) more/
    ]
    count = 0
    $ORDINALS.each do |ordinal|
      case DRC.bput("count my #{ordinal} #{item}",
                    'I could not find what you were referring to.',
                    'tell you much of anything.',
                    *match_messages)
      when 'I could not find what you were referring to.'
        break
      when 'tell you much of anything.'
        echo "ERROR: count_item_parts called on non-stackable item: #{item}"
        count = count_items(item)
        break
      when *match_messages
        count += DRC.text2num(Regexp.last_match(1).tr('-', ' '))
      end
      waitrt?
    end
    count
  end

  def count_items(item)
    /inside your (.*).|I could not find/ =~ DRC.bput("tap my #{item}", 'inside your (.*).', 'atop your', 'I could not find')
    container = Regexp.last_match(1)
    return 0 if container.nil?
    count_items_in_container(item, container)
  end

  def count_items_in_container(item, container)
    contents = DRC.bput("rummage /C #{item.split.last} IN MY #{container}", '^You rummage .*', 'That would accomplish nothing')
    # This regexp avoids counting the quoted item name in the message, as
    # well as avoiding finding the item as a substring of other items.
    contents.scan(/ #{item}\W/).size
  end

  def count_lockpick_container(container)
    count = DRC.bput("app my #{container}", 'and it appears to be full', 'and it might hold an additional \d+', '\d+ lockpicks would probably fit').scan(/\d+/).first.to_i
    waitrt?
    count
  end

  def refill_lockpick_container(lockpick_type, hometown, container, count)
    return if count < 1

    room = get_data('town')[hometown]['locksmithing']['id']

    if room.nil?
      echo '***No locksmith location found for current Hometown! Skipping refilling!***'
      return
    end

    DRCT.walk_to(room)
    if Room.current.id != room
      echo '***Could not reach locksmith location! Skipping refilling!***'
      return
    end

    count.times do
      buy_item(room, "#{lockpick_type} lockpick")
      DRC.bput("put my lockpick on my #{container}", 'You put')
    end

    # Be polite to Thieves, who need the room to be empty
    DRC.fix_standing
    move('out') if XMLData.room_exits.include?('out')
  end

  def stow_hands
    stow_hand('right') if DRC.right_hand
    stow_hand('left') if DRC.left_hand
  end

  def stow_hand(hand)
    braid_regex = /The braided (.+) is too long/
    result = DRC.bput("stow #{hand}", 'You put', braid_regex, 'is too long', '^As you open your hand to release the', 'You easily strap','You hold out')
    dispose_trash(DRC.get_noun(Regexp.last_match(1))) if braid_regex.match(result)
  end

  def get_item(item, container)
    result = DRC.bput("get #{item} in my #{container}", 'You get', 'I could not', 'What were you', 'You need a free')
    result =~ /^You get/
  end

  def get_item_list(container)
    DRC.bput("look in #{container}", 'In the .* you see (.*)\.', 'There is nothing')
      .match(/In the .* you see (?:a|an|some) (?<items>.*)\./)[:items]
      .split(/(?:, | and )?(?:a|an|some) /)
  end

  def put_away_item?(item, container)
    if container.is_a?(Array)
        container.each do |c|
            return true if put_away_item_safe?(item, c)
        end
        return false
    end
    put_away_item_safe?(item, container)
  end

  def put_away_item_safe?(item, container)
    container = "my #{container}" unless container =~ /^my /i
    put_away_item_unsafe?(item, container)
  end

  def put_away_item_unsafe?(item, container)
    result = DRC.bput("put my #{item} in #{container}", $PUT_AWAY_ITEM_SUCCESS_PATTERNS, $PUT_AWAY_ITEM_OPEN_PATTERNS, $PUT_AWAY_ITEM_FAILURE_PATTERNS)

    case result
    when *$PUT_AWAY_ITEM_OPEN_PATTERNS
      return false if open_container?(container) == false
      return put_away_item_unsafe?(item,container)
    when *$PUT_AWAY_ITEM_SUCCESS_PATTERNS
      return true
    when $PUT_AWAY_ITEM_FAILURE_PATTERNS
      return false
    else
      return false
    end
  end

  def open_container?(container)
    case DRC.bput("open #{container}", $OPEN_CONTAINER_SUCCESS_PATTERNS, $OPEN_CONTAINER_FAILURE_PATTERNS)
    when *$OPEN_CONTAINER_SUCCESS_PATTERNS
      return true
    when *$OPEN_CONTAINER_FAILURE_PATTERNS
      return false
    else
      return false
    end
  end

  def close_container?(container)
    case DRC.bput("close #{container}", $CLOSE_CONTAINER_SUCCESS_PATTERNS, $CLOSE_CONTAINER_FAILURE_PATTERNS)
    when *$CLOSE_CONTAINER_SUCCESS_PATTERNS
      return true
    when *$CLOSE_CONTAINER_FAILURE_PATTERNS
      return false
    else
      return false
    end
  end
end
