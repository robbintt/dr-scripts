=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#invoke-rune
=end

custom_require.call(%w[common-travel common common-items common-arcana spellmonitor])

class Runestone
  include DRC
  include DRCT
  include DRCI
  include DRCA

  def initialize
    arg_definitions = [
      [
        { name: 'spell',
          regex: /^[A-z\s\-']+$/i,
          variable: true,
          description: "Specify spell to cast from runestone. Spells are: 'Arc Light'
                Althleticism Bless Calm 'Clear Vision' Compost 'Eagle's Cry'
                'Fire Shards' 'Glythtide's Gift' Geyser 'Protection from Evil'
                Refresh Shadows Zephyr. Use double quotes." },

        { name: 'debug',
          regex: /debug/i,
          optional: true }
      ]
    ]

    args = parse_args(arg_definitions)
    spell = args.spell
    @debug = args.debug
    settings = get_settings
    @buff_spell_mana_threshold = settings.buff_spell_mana_threshold
    @runestone_storage = settings.runestone_storage
    @harness = settings.runestone_harness
    runestone_purchase = settings.runestone_purchase

    echo spell if @debug
    echo @harness if debug
    @rune = get_rune_name_for_spell_name(spell)
    echo ("Spell name after mapping returns from get_rune_name_for_spell_name: #{@rune}") if @debug
    spell = format_spell_name(args.spell)

    until DRSpells.active_spells.include?(spell)
      if DRCI.inside?(@rune, @runestone_storage)
        next if !get_runestone
        runestone_cast
      elsif runestone_purchase
        buy_runestone
      else
        DRC.message("Out of #{@rune}!")
        out_beep
      end
    end
  end

  def format_spell_name(spell)
    ### Because Protection from Evil has a lowercase letter for the middle word
    ### this work around is required.
    if spell == "protection from evil"
      return "Protection from Evil"
    else
      return spell.split(/ |\_|\-/).map(&:capitalize).join(" ")
    end
  end

  def get_rune_name_for_spell_name(spell_name)
    runestone_map = {
      "arc Light" => "calavarite runestone",
      "athleticism" => "selenite runestone",
      "bless" => "elbaite runestone",
      "calm" => "xibaryl runestone",
      "clear vision" => "avaes runestone",
      "compost" => "asketine runestone",
      "eagle's cry" => "electrum runestone",
      "fire shards" => "rhodonite runestone",
      "geyser" => "celestite runestone",
      "glythtide's gift" => "axinite runestone",
      "protection from evil" => "topaz runestone",
      "refresh" => "quartz runestone",
      "shadows" => "azurite runestone",
      "zephyr" => "imnera runestone"
    }

    runestone_map[/\b#{spell_name}\b+/]
    echo ("Rune value after checking map: runestone_map[spell_name] #{runestone_map[spell_name]}") if @debug
    echo ("Spell value after checking map: #{spell_name}") if @debug
    if runestone_map[spell_name].nil?
      DRC.message("Argument spelled wrong. For usage see ;invoke-rune.")
      out_beep
    end
    return runestone_map[spell_name]
  end

  def runestone_cast
    pause 1 while mana < @buff_spell_mana_threshold
    case bput("invoke my #{@rune}", 'Closing your eyes',\
                                    'Well, that was fun',\
                                    'backfire',\
                                    'The spell pattern resists',\
                                    'You strain, but are too mentally fatigued to finish the pattern',\
                                    'Invoke what?')
    when 'Well, that was fun'
      waitrt?
      DRCI.dispose_trash(@rune)
      return
    when 'backfire','The spell pattern resists', 'Invoke what?'
      return
    when 'You strain, but are too mentally fatigued to finish the pattern'
      DRC.message("Cannot cast this spell currently!")
      out_beep
    end
    waitcastrt?
    bput("harn #{@harness}", 'You tap into the mana')
    waitrt?
    bput('cast', 'You')
    waitrt?
    DRCI.put_away_item?(@rune, @runestone_storage)
  end

  def get_runestone
    DRCI.get_item(@rune, @runestone_storage)
    if reget(3, "You get a useless #{@rune}")
      DRCI.dispose_trash(@rune)
      return false
    end
    return true
  end

  def buy_runestone
    current_room = Room.current.id
    DRC.wait_for_script_to_complete('restock') unless Script.running?('combat-trainer')
    DRCT.walk_to(current_room)
  end

  def out_beep
    beep
    exit
  end

  before_dying do

  end
end
Runestone.new