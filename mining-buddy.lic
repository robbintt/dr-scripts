=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#mining-buddy
=end

custom_require.call(%w[common common-items common-money common-travel drinfomon])

class MiningBuddy
  include DRC
  include DRCI
  include DRCM
  include DRCT

  def initialize
    setup

    ensure_copper_on_hand(10_000, @settings)

    if @use_packet
      buy_deed_packet unless exists?('packet')
      buy_deed_packet unless exists?('second packet')

      first = bput('look first packet', 'You count \d+').scan(/\d+/).first.to_i
      second = bput('look second packet', 'You count \d+').scan(/\d+/).first.to_i

      if second < first
        fput('get my second packet')
        fput('stow my packet')
      end
    end
    wait_for_script_to_complete('buff', ['mining'])
    bput('speculate luck', '^You focus your mind on the world around you', '^You are already focusing on the world around you.', '^Your pattern-matching skills are still exhausted') if DRStats.trader? && DRStats.circle >= 65
    @areas.each { |area_name| mine_rooms(@area_list[area_name]) }
  end

  def buy_deed_packet
    if @deeds_room && @deeds_number
      DRCT.order_item(@deeds_room, @deeds_number)
    else
      echo 'Your hometown is missing data for purchasing deeds!'
      exit
    end
    fput('stow my packet')
  end

  def setup
    @settings = get_settings
    @area_list = get_data('mining').mining_buddy_rooms
    @forging_belt = @settings.forging_belt
    @areas = @settings.mines_to_mine
    @skip_populated = @settings.mining_skip_populated
    @mine_every_room = @settings.mining_buddy_mine_every_room
    @vein_list = @settings.mining_buddy_vein_list
    @mining_implement = @settings.mining_implement
    @use_packet = @settings.mine_use_packet
    @hometown = @settings.hometown
    deeds_data = get_data('crafting').deeds[@hometown]
    @deeds_room = deeds_data['room']
    @deeds_number = deeds_data['medium_number']
    echo("#{@areas}:#{@vein_list}") if UserVars.mining_debug
  end

  def get_mining_tool
    if @forging_belt['items'].grep(/#{@mining_implement}/i).any?
      bput("untie my #{@mining_implement}", 'You remove', 'You untie')
    else
      bput("get my #{@mining_implement}", 'You get', 'You are already')
    end
  end

  def store_mining_tool
    waitrt?
    if @forging_belt['items'].grep(/#{@mining_implement}/i).any?
      fput("tie my #{@mining_implement} to #{@forging_belt['name']}")
    else
      fput("stow my #{@mining_implement}")
    end
  end

  def check_repair
    get_mining_tool
    result = bput("anal my #{@mining_implement}", 'practically in mint', 'pristine condition', 'in good condition', 'crafting tool and it is rather scuffed up', 'Roundtime')
    waitrt?

    store_mining_tool
    return unless /roundtime/i =~ result
    repair = get_data('town')[@hometown]['metal_repair']
    walk_to(repair['id'])
    get_mining_tool
    fput("give #{repair['name']}")
    fput("give #{repair['name']}")
    pause 10 until bput('look at my ticket', 'should be ready by now', 'Looking at the') == 'should be ready by now'
    fput("give #{repair['name']}")
    store_mining_tool
  end

  def mine_rooms(rooms)
    rooms.each do |room|
      wait_for_script_to_complete('safe-room') if bleeding?
      next unless mine?(room)
      check_repair
      DRCA.do_buffs(@settings, 'mining')
      bput('speculate luck', '^You focus your mind on the world around you', '^You are already focusing on the world around you.', '^Your pattern-matching skills are still exhausted') if DRStats.trader? && DRStats.circle >= 65
    end
  end

  def mine?(room)
    waitrt?
    walk_to(room)
    unless DRRoom.pcs.empty?
      return false if @skip_populated

      fput('wave')
    end

    unless @mine_every_room
      bput('prospect', 'Roundtime')
      results = reget(20, 'can be mined here')

      echo(results) if UserVars.mining_debug

      return false if results.nil?
      return false unless results
                          .each_with_object([]) { |line, array| array << line.match(/You are certain that (.*) can be mined here/i)[1] }
                          .reject(&:nil?)
                          .map(&:downcase)
                          .any? { |vein| @vein_list.map(&:downcase).include?(vein) }
    end

    waitrt?

    wait_for_script_to_complete('mine')
    true
  end
end

MiningBuddy.new
