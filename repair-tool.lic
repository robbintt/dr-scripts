=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#enchant
=end

custom_require.call(%w[common common-items events common-crafting equipmanager])

class RepairTool
  include DRC
  include DRCC
  include DRCA
  include DRCI

  def initialize
    @settings = get_settings
    @hometown = @settings.hometown
    @bag = @settings.crafting_container

    # not used, but passed to stow_crafting_item in crafting-common.lic
    @belt = @settings.crafting_container
    # not used, but passed to stow_crafting_item in crafting-common.lic
    @bag_items = @settings.crafting_items_in_container

    crafting_data = get_data('crafting')
    @recipe_parts = crafting_data['recipe_parts']
    @discipline = 'blacksmithing'
    info = crafting_data[@discipline][@hometown]
    unless info
      echo("No crafting settings found for discipline: #{discipline}")
      exit
    end

    @brush = @settings.repair_tools.find { |item| /brush/ =~ item } || 'brush'
    @oil = @settings.repair_tools.find { |item| /oil/ =~ item } || 'oil'

    @brush_part_name = "wire brush"
    @oil_part_name = "flask of oil"

    arg_definitions = [
      [
        { name: 'tool', display: 'tool name', regex: /^[A-z\s\-']+$/i, variable: true, description: 'Name of the tool, wrap in double quotes if this is multiple words.' },
      ]
    ]

    args = parse_args(arg_definitions)

    @tool = args.tool

    @equipment_manager = EquipmentManager.new
    @equipment_manager.empty_hands

    repair_item
  end

  def replenish_repair_tools(part)
    data = @recipe_parts[part][@hometown]
    order_item(data['part-room'], data['part-number'])
  end

  # TODO: try using this in repair_item
  def stow_tool(name)
    stow_crafting_item(name, @bag, @belt)
  end

  # TODO: try using this in repair_item
  def get_tool(name)
    get_crafting_item(name, @bag, @bag_items, @belt, true)
  end

  def repair_item
    waitrt?
    pause
    bput("get my #{@tool} from my #{@bag}", "You get", "What were you referring to?")

    brush_resp = bput "get my #{@brush} from my #{@bag}", "You get", "What were you referring to?"
    if brush_resp.include?("What were you referring to")
      replenish_repair_tools(@brush_part_name)
    end

    scrape_resp = fput "scrape my #{@tool} with my #{@brush}", "You scrape", "not damaged enough to warrant repair.", "ready to be oiled", "Gently you begin"
    pause
    waitrt?
    fput "put my #{@brush} in my #{@bag}", "You put", "What were you referring to?"
    pause

    if scrape_resp.include?("not damaged enough to warrant repair.")
      fput "put my #{@tool} in my #{@bag}", "You put", "What were you referring to?"
      exit
    end

    oil_resp = bput "get my #{@oil} from my #{@bag}", "You get", "What were you referring to?"
    if oil_resp.include?("What were you referring to")
      replenish_repair_tools(@oil_part_name)
    end

    bput("pour my #{@oil} on my #{@tool}", "You pour", "You cannot figure out how to do that.")
    pause
    waitrt?
    fput "put my #{@oil} in my #{@bag}", "You put", "What were you referring to?"
    fput "put my #{@tool} in my #{@bag}", "You put", "What were you referring to?"
  end
end





RepairTool.new
