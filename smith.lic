# quiet
=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#smith
=end

custom_require.call(%w[common common-crafting common-items common-money common-travel drinfomon])

class Smith
  include DRC
  include DRCC
  include DRCI
  include DRCM
  include DRCT

  def initialize
    arg_definitions = [
      [
        { name: 'material', regex: /\w+/, description: 'Metal type of the ingot' },
        { name: 'item_name', display: 'recipe name', regex: /^[A-z\s\-\']+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'stamp', regex: /^stamp/i, optional: true },
        { name: 'temper', regex: /^temper/i, optional: true },
        { name: 'hone', regex: /^hone/i, optional: true },
        { name: 'balance', regex: /^balance/i, optional: true },
        { name: 'lighten', regex: /^lighten/i, optional: true },
        { name: 'buy', regex: /^buy/i, optional: true }
      ]
    ]

    args = parse_args(arg_definitions)

    @settings = get_settings
    discipline = get_data('crafting')['blacksmithing'][@settings.hometown]
    @hometown = @settings.hometown
    @container = get_settings.crafting_container
    recipes = get_data('recipes').crafting_recipes.select { |recipe| recipe['type'] =~ /blacksmithing|weaponsmithing|armorsmithing/i }
    recipe = recipe_lookup(recipes, args.item_name)
    return unless recipe

    parts = recipe['part'] || []
    smith(args.material, discipline, recipe, parts, args.buy, args.stamp, args.temper, args.hone, args.balance, args.lighten)
  end

  def smith(material, discipline, recipe, parts, buy, stamp, temper, hone, balance, lighten)
    if discipline['stock-volume'] < recipe['volume'] && buy
      echo '***You cannot buy an ingot large enough to craft this item.***'
      echo '***Automatically combining ingots via smelting is not yet supported.***'
      echo '***You will need to do so by hand and then call ;smith again.***'
      exit
    end

    buy_parts(parts)
    buy_ingot(discipline) if buy
    wait_for_script_to_complete('buff', ['smith'])
    craft_item(recipe, discipline, material)
    stamp_item(recipe) if stamp
    temper_item(discipline, recipe) if temper
    hone_item(discipline, recipe) if hone
    balance_item(discipline, recipe) if balance
    lighten_item(discipline, recipe) if lighten
    dispose_scrap(discipline, recipe) if buy
  end

  def buy_parts(parts)
    ensure_copper_on_hand(700, @settings)
    stow_hands

    parts.each do |part|
      next if exists?(part)

      data = get_data('crafting')['recipe_parts'][part][@hometown]
      if data['part-number']
        DRCT.order_item(data['part-room'], data['part-number'])
      else
        DRCT.buy_item(data['part-room'], part)
      end
      bput("put #{part} in my #{@container}", 'You put')
    end
  end

  def buy_ingot(discipline)
    ensure_copper_on_hand(700, @settings)
    DRCT.order_item(discipline['stock-room'], discipline['stock-number'])
    bput("put ingot in my #{@container}", 'You put')
    stow_hands
  end

  def craft_item(recipe, discipline, material)
    check_oil(discipline)
    find_anvil(@hometown)
    wait_for_script_to_complete('forge', [recipe['type'], recipe['chapter'], recipe['name'], material, recipe['noun']])
  end

  def check_oil(discipline)
    $ORDINALS.each do |ord|
      case bput("look my #{ord} oil", /thick and syrupy substance that easily coats and lubricates metal/, /You see nothing unusual/, /I could not find what you were referring to/, /There appears to be something written/, /(coal|lamp|fish) oil/, /The oil bottle is full/)
      when /thick and syrupy substance that easily coats and lubricates metal/
        return if ord == 'first'
        bput("get my #{ord} oil", /You get/)
        bput("put oil in my #{@container}", 'You put')
        return
      when /I could not find what you were referring to/
        break
      end
    end

    ensure_copper_on_hand(1000, @settings)
    DRCT.order_item(discipline['finisher-room'], discipline['finisher-number'])
    bput("put oil in my #{@container}", 'You put')
    stow_hands
  end

  def stamp_item(recipe)
    fput('get my stamp')
    fput("mark my #{recipe['noun']} with my stamp")
    pause 1
    waitrt?
    fput("put my stamp in my #{@container}")
  end

  def temper_item(discipline, recipe)
    check_oil(discipline)
    find_anvil(@hometown)
    fput("get my #{recipe['noun']}")
    wait_for_script_to_complete('forge', ['temper', recipe['noun']])
  end

  def hone_item(discipline, recipe)
    check_oil(discipline)
    fput("get my #{recipe['noun']}")
    wait_for_script_to_complete('forge', ['hone', recipe['noun']])
  end

  def balance_item(discipline, recipe)
    check_oil(discipline)
    fput("get my #{recipe['noun']}")
    wait_for_script_to_complete('forge', ['balance', recipe['noun']])
  end

  def lighten_item(discipline, recipe)
    check_oil(discipline)
    fput("get my #{recipe['noun']}")
    wait_for_script_to_complete('forge', ['lighten', recipe['noun']])
  end

  def dispose_scrap(discipline, recipe)
    return unless discipline['stock-volume'] > recipe['volume']

    dispose(discipline['stock-name'], discipline['trash-room'])
  end
end

Smith.new
