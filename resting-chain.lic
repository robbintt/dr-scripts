=begin
  Documentation:

  Future:
    -
=end

custom_require.call(%w[common common-travel])
include DRC  # wait_for_script_to_complete
include DRCT # walk_to

no_pause_all

def power
  # pause ;percmoons if using this
  pause
  waitrt?
  put "perc moons"
  pause
  waitrt?
  put "perc mana"
end

def hunt_trainer(society)
  if ['enchanting', 'forging', 'outfitting', 'alchemy'].include?(society)
    waitrt?
    wait_for_script_to_complete('go2', [society] ) # crossing urn
    pause
    waitrt?
    put('hunt')
    pause
    waitrt?
    put('hunt 1')
  end
end

# from training-manager
def check_favors
  include DRC
  @settings = get_settings
  town_data = get_data('town')
  @hometown = town_data[@settings.hometown]
  return unless @settings.favor_goal
  /(\d+)/ =~ bput('favor', 'You currently have \d+', 'You are not currently')
  favor_count = Regexp.last_match(1).to_i
  return if favor_count >= @settings.favor_goal

  # TODO: dry it out
  if /could not/ =~ bput("tap my other #{@settings.favor_god} orb", 'The orb is delicate', 'I could not find')
  elsif rub_other_orb?
    walk_to(@hometown['favor_altar']['id'])
    fput("get my #{@settings.favor_god} orb")
    fput('put my orb on altar')
  end
  if /could not/ =~ bput("tap my #{@settings.favor_god} orb", 'The orb is delicate', 'I could not find')
    run_favors
    fput('stow my orb')
  elsif rub_orb?
    walk_to(@hometown['favor_altar']['id'])
    fput("get my #{@settings.favor_god} orb")
    fput('put my orb on altar')
    if favor_count + 1 < @settings.favor_goal
      run_favors
      fput('stow my orb')
    end
  end
end
# TODO: dry it out
def rub_other_orb?
  case bput("rub my other #{@settings.favor_god} orb", 'not yet fully prepared', 'lacking in the type of sacrifice the orb requires', 'your sacrifice is properly prepared')
  when 'not yet fully prepared'
    false
  when 'lacking in the type of sacrifice the orb requires'
    false
  when 'your sacrifice is properly prepared'
    true
  end
end
def rub_orb?
  case bput("rub my #{@settings.favor_god} orb", 'not yet fully prepared', 'lacking in the type of sacrifice the orb requires', 'your sacrifice is properly prepared')
  when 'not yet fully prepared'
    false
  when 'lacking in the type of sacrifice the orb requires'
    false
  when 'your sacrifice is properly prepared'
    true
  end
end
def run_favors
  if @use_favor_altars
    wait_for_script_to_complete('favor', [@settings.favor_god])
  else
    wait_for_script_to_complete('favor')
  end
end

studied_art = 0

# this never gets unpaused since this script is killed
pause_script('percmoons')
loop {

  # used custom experience increments per script, certain skills are better suited to the end

  # standin for appraisal
  pause
  waitrt?
  put "app my red pouch careful"
  waitrt?
  pause

  check_favors
  hunt_trainer('enchanting')

  #if DRSkill.getxp('Appraisal') < 25 and studied_art == 0
  #  power
  #  studied_art = 1 # do this once only for now
  #  wait_for_script_to_complete('study-art')
  #end

  power
  wait_for_script_to_complete('burgle',['start'])
  power
  unpause_other_scripts # temp fix for bug in percmoons

  wait_for_script_to_complete('go2', ['19162'] ) # crossing urn

  if DRSkill.getxp('Lunar Magic') < 30
    power
    wait_for_script_to_complete('sym', [9])
  end

  if DRSkill.getxp('Sorcery') < 30
    power
    wait_for_script_to_complete('tattoo', [9])
  end

  # need to move gazecrystal from combat_methods to util_methods and add here

  # try athletics solely from burgle
  #while DRSkill.getxp('Athletics') < 15
  #  power
  # wait_for_script_to_complete('go2', ['3353'] ) # lang bin for climb
  #  power
  #  wait_for_script_to_complete('climb', [6])
  #end

  check_favors
  hunt_trainer('enchanting')

  if DRSkill.getxp('Enchanting') < 14
    power
    wait_for_script_to_complete('go2', ['19162'] ) # crossing urn
    wait_for_script_to_complete('buff',['enchanting'])
    wait_for_script_to_complete('workorders', ['artificing'] )

    # replace with @settings.enchanting_tools
    wait_for_script_to_complete('repair-tool',['imbuement rod'])
    wait_for_script_to_complete('repair-tool',['precise burin'])
    wait_for_script_to_complete('repair-tool',['uthamar brazier'])
    wait_for_script_to_complete('repair-tool',['augmenting loop'])
    wait_for_script_to_complete('repair-tool',['basic stamp'])
  end

  check_favors
  hunt_trainer('enchanting')

  # probably use perception as the trigger instead...
  if DRSkill.getxp('Outdoorsmanship') < 10 or DRSkill.getxp('Perception') < 10
    power
    wait_for_script_to_complete('go2', ['19162'] ) # crossing urn
    wait_for_script_to_complete('rocks', [10])
  end

  if DRSkill.getxp('First Aid') < 30
    power
    # need to tell study whether to pass in a point in the book or continue from last
    wait_for_script_to_complete('study', [11])
  end

  check_favors
  hunt_trainer('enchanting')
}

# this never gets unpaused since this script is killed
unpause_script('percmoons')
