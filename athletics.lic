=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#athletics
=end

custom_require.call(%w[common common-items common-travel events drinfomon])

class Athletics
  include DRC
  include DRCT
  include DRCI

  def initialize
    @settings = get_settings
    @athletics_options = get_data('athletics').athletics_options
    @performance_pause = @settings.performance_pause

    @climbing_target = get_data('athletics').practice_options[@settings.climbing_target]
    @swimming_target = get_data('athletics').swimming_options[@settings.swimming_target]
    have_climbing_rope = get_settings.have_climbing_rope
    @outdoorsmanship_rooms = get_settings.athletics_outdoorsmanship_rooms

    get_athletics_items

    start_exp = DRSkill.getxp('Athletics')
    @end_exp = [start_exp + 15, 29].min

    arg_definitions = [
      [
        { name: 'wyvern', regex: /^wy.*/i, optional: true, description: 'Climb both undergondola and wyvern cliffs' },
        { name: 'undergondola', regex: /^un.*/i, optional: true, description: 'Climb branch etc undergondola' },
        { name: 'xalas', regex: /^xala.*/i, optional: true, description: 'Climb xalas in zoluren in instead of undergondola' },
        { name: 'stationary', regex: /^stat.*/i, optional: true, description: 'Stand still and use a climbing rope' },
        { name: 'cliffs', regex: /^cliff.*/i, optional: true, description: 'Climb undergondola without attempting branch' },
        { name: 'max', regex: /^max/i, optional: true, description: 'Keep training until 29/34+' }
      ]
    ]

    args = parse_args(arg_definitions)

    @end_exp = 29 if args.max
    start_script('skill-recorder') unless Script.running?('skill-recorder')
    if args.wyvern || (@settings.climbing_target == 'wyvern')
      climb_wyvern
    elsif args.undergondola || (@settings.climbing_target == 'undergondola')
      climb_branch
    elsif args.xalas || (@settings.climbing_target == 'xalas')
      climb_xalas
    elsif args.cliffs || (@settings.climbing_target == 'cliffs')
      climb_cliffs  
    elsif have_climbing_rope
      train_with_rope(args.stationary)
    elsif @swimming_target
      swim_loop(@swimming_target['rooms'])
    elsif @climbing_target
      climb_practice(@climbing_target['id'], @climbing_target['target'], @climbing_target['hide'])
    elsif @settings.hometown == 'Crossing'
      crossing_athletics
    elsif @settings.hometown == 'Riverhaven'
      crossing_athletics if DRSkill.getrank('Athletics') > 140
    elsif @settings.hometown == 'Shard'
      shard_athletics
    elsif @settings.hometown == 'Hibarnhvidar'
      hib_athletics
    elsif @settings.hometown == 'Ratha'
      ratha_athletics
    end

    stow_athletics_items
  end

  def outdoorsmanship_waiting(n)
    start = Time.now
    walk_to(@outdoorsmanship_rooms.sample) unless @outdoorsmanship_rooms.empty?
    stow_athletics_items
    wait_for_script_to_complete('outdoorsmanship', [n])
    remaining_pause = ((n*15) - (Time.now - start))
    pause remaining_pause if remaining_pause > 0
    get_athletics_items
  end

  def get_athletics_items
    return if @settings.held_athletics_items.empty?

    @settings.held_athletics_items.each { |item| bput("get my #{item}", 'You', 'What were') }
  end

  def stow_athletics_items
    return if @settings.held_athletics_items.empty?

    @settings.held_athletics_items.each { |item| bput("stow my #{item}", 'You', 'Stow what?') }
  end

  def override_location_and_practice(place)
    @climbing_target = get_data('athletics').practice_options[place]
    climb_practice(@climbing_target['id'], @climbing_target['target'], @climbing_target['hide'])
  end

  def swim_loop(rooms)
    return unless rooms
    rooms.each { |x| walk_to(x) } until done_training?
  end

  def done_training?
    DRSkill.getxp('Athletics') >= @end_exp
  end

  def offset_climbing_song(direction)
    return unless UserVars.climbing_song_offset
    return unless @song_list

    if direction.eql?(1)
      UserVars.climbing_song = @song_list[UserVars.climbing_song]
    elsif direction.eql?(-1)
      UserVars.climbing_song = @song_list.key(UserVars.climbing_song)
    else
      echo 'Invalid offset direction'
    end
  end

  def train_with_rope(stationary)
    return unless exists?("#{@settings.climbing_rope_adjective} rope")
    return unless exists?(@settings.worn_instrument)

    UserVars.climbing_song ||= pick_climbing_song
    echo "UserVars.climbing_song: #{UserVars.climbing_song}" if UserVars.athletics_debug

    @song_list = get_data('perform').perform_options
    echo "@song_list: #{@song_list}" if UserVars.athletics_debug

    Flags.add('climbing-finished', 'You finish practicing your climbing', 'The rope\'s will quickly fades away', 'Your focus diverts away from the rope')
    Flags.add('climbing-too-hard', 'This climb is too difficult')
    Flags.add('climbing-too-easy', 'This climb is no challenge at all, so you stop practicing')
    Flags.add('climbing-dead-rope', '^You believe you can use it for \d+ minutes per day\.', '^You finish practicing your climbing skill just as your rope begins to slacken')
    Flags.add('climbing-live-rope', '^You believe you haven\'t yet used it today')

    stow_hands
    walk_to @settings.safe_room unless stationary
    case bput("get #{@settings.climbing_rope_adjective} rope", 'You are already holding that', 'You get', 'What were you', 'But that is already')
    when 'But that is already'
      bput("remove my #{@settings.climbing_rope_adjective} rope", 'You remove')
    end
    Flags['climbing-dead-rope'] = !check_rope?
    until done_training? || Flags['climbing-dead-rope']
      fix_standing
      Flags.reset('climbing-finished')
      break unless DRC.play_song?(@settings, @song_list, true, true, true)
      case bput("climb practice #{@settings.climbing_rope_adjective} rope", 'You begin to practice ', 'you mime a convincing climb while pulling the rope hand over hand', 'Directing your attention toward your rope', 'Allows you to climb various things like a tree', 'But you aren\'t holding', 'You should stop practicing')
      when /you mime/
        break unless check_rope?
        break unless DRC.play_song?(@settings, @song_list, true, true, true)
      when /Directing your/, /You should stop practicing/
        loop do
          pause 1
          break if Flags['climbing-finished']
          if Flags['climbing-too-hard']
            Flags.reset('climbing-too-hard')
            UserVars.climbing_song_offset = true
            DRC.stop_playing
            offset_climbing_song(-1)
            break
          elsif Flags['climbing-too-easy']
            Flags.reset('climbing-too-easy')
            UserVars.climbing_song_offset = true
            DRC.stop_playing
            offset_climbing_song(1)
            break
          elsif Flags['dead-rope']
            break unless check_rope?
            break unless DRC.play_song?(@settings, @song_list, true, true, true)
          end
        end
      when /Allows you to climb various things like a tree/
        echo 'Waiting for rope to become climbable again'
        pause 20
      when /But you aren't holding/
        bput("get #{@settings.climbing_rope_adjective} rope", 'You are already holding that', 'You get', 'What were you')
      end
    end
    Flags.delete('climbing-finished')
    Flags.delete('climbing-too-easy')
    Flags.delete('climbing-too-hard')
    Flags.delete('climbing-dead-rope')
    bput('stop climb', 'You stop practicing your climbing skills.', "You weren't practicing your climbing skills anyway.")
    DRC.stop_playing
    fix_standing
    stow_hands
  end

  def check_rope?
    bput("study #{@settings.climbing_rope_adjective} rope", 'You\'re certain you can')
    pause 1
    if Flags['climbing-dead-rope'] && !Flags['climbing-live-rope']
      DRC.message('Your rope is dead tired! Get a better one, you poor slob!')
      false
    else
      true
    end
  end

  def pick_climbing_song
    # start at a high difficulty guess and work downwards
    case DRSkill.getrank('Athletics')
    when 0..100
      'lament'
    when 100..250
      'psalm'
    when 250..350
      'tarantella'
    when 350..450
      'rondo'
    when 450..1750
      'concerto masterful'
    end
  end

  def crossing_athletics
    if UserVars.athletics <= 50
      swim_loop(get_data('athletics').swimming_options['arthe_dale']['rooms'])
    elsif UserVars.athletics < 290
      waitrt?
      pause @performance_pause # to give performance time to complete before_dying if stopped from the previous script
      start_script('performance') unless Script.running?('performance')
      until done_training?
        @athletics_options
          .reject { |data| @settings.avoid_athletics_in_justice && data['justice'] }
          .each do |data|
          break unless climb?(data['room'], data['targets'])
        end
      end
    elsif UserVars.athletics < 450
      override_location_and_practice('segoltha_bank')
    else
      message("The xalas argument will train faster at 650+ athletics.  Be aware that it's potentially dangerous.") if UserVars.athletics > 650
      override_location_and_practice('arthelun_rocks')
      message("The xalas argument will train faster at 650+ athletics.  Be aware that it's potentially dangerous.") if UserVars.athletics > 650
    end
  end

  def shard_athletics
    until done_training?
      if UserVars.athletics > 20 && UserVars.athletics <= 90
        swim_zaldeni
      elsif UserVars.athletics < 240
        override_location_and_practice('shard_embrasure')
      elsif UserVars.athletics < 540
        climb_cliffs
      elsif UserVars.athletics
        climb_branch
      end
    end
  end

  def hib_athletics
    swim_liirewsag
  end

  def ratha_athletics
    until done_training?
      if DRSkill.getrank('Athletics') <= 185
        override_location_and_practice('ratha_rock_gorge')
      elsif DRSkill.getrank('Stealth') >= 130
        override_location_and_practice('ratha_deep_crack')
      else
        # stops in infinte loop when > 185 ranks in athletics and < 130 ranks in stealth
        DRC.message("You don't meet current requirements for Ratha climbing. You need at least 130 stealth.")
        break
      end
    end
  end

  def swim_zaldeni
    until done_training?
      walk_to(11_481)
      walk_to(11_482)
      walk_to(11_483)
    end
  end

  def swim_liirewsag
    # Intermittent errors in the map will cause go2 to get stuck.  The manual moves are a workaround for that
    walk_to(4155)
    move('nw')
    until done_training?
      move('climb bank')
      3.times do
        move('south')
        waitrt?
      end
      walk_to(4155)
      move('nw')
    end
    move('climb bank')
    waitrt?
  end

  def climb_practice(room, target, to_hide = false)
    return unless target
    walk_to(room)
    until done_training?
      retreat
      if to_hide
        remaining_attempts = 5
        while remaining_attempts > 0
          break if hide?
          remaining_attempts -= 1
        end
        return if remaining_attempts.zero?
      else
        start_script('performance', ['noclean']) unless Script.running?('performance')
        pause @performance_pause # make sure you are playing before starting climb practice
      end
      Flags.add('ct-climbing-finished', 'You finish practicing your climbing')
      Flags.add('ct-climbing-combat', 'You are engaged in combat')
      bput("climb practice #{target}", 'You begin to practice ')
      loop do
        pause
        break if Flags['ct-climbing-finished']
        return if Flags['ct-climbing-combat']
        break if done_training?
      end
      bput('stop climb', 'You stop practicing your climbing skills.', "You weren't practicing your climbing skills anyway.")
    end

    bput('unhide', 'You come out of hiding', 'You slip out of hiding', 'But you are not') if to_hide
  end

  def climb?(room, targets)
    targets.each do |target|
      walk_to(room)
      return true if DRRoom.npcs.length >= 3

      bput("climb #{target}", '.*')
      pause
      waitrt?
      return false if done_training?
    end
    true
  end

  def climb_branch
    if UserVars.athletics < 540
      override_location_and_practice('undergondola_branch')
    elsif UserVars.athletics < 850
      walk_to(9607)
      walk_to(9515)
      until done_training?
        walk_to(2245)
        walk_to(9607)
        walk_to(11_126)
        walk_to(9515)
        break if done_training?
        outdoorsmanship_waiting(4)
      end
    else
      climb_wyvern
    end
  end

  def climb_cliffs
    until done_training?
      walk_to(9525)
      walk_to(9609)
      walk_to(9607)
      walk_to(2900)
      break if done_training?
      outdoorsmanship_waiting(4)
    end
  end

  def climb_wyvern
    walk_to(19_464)
    until done_training?
      walk_to(2245)
      walk_to(9607)
      walk_to(11_126)
      walk_to(19_464)
      walk_to(13_558)
      walk_to(14_010)
      walk_to(13_117)
      walk_to(6443)
      break if done_training?
      outdoorsmanship_waiting(3)
    end
  end

  def climb_xalas
    walk_to(6154)
    until done_training?
      walk_to(12_838)
      walk_to(6154)
      break if done_training?
      outdoorsmanship_waiting(4)
    end
  end
end

before_dying do
  stop_script('performance') if Script.running?('performance')
  put('stop climb')
end

Athletics.new
